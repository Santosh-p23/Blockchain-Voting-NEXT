{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AddressToVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AddressToVoter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAVoter",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "voterName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CandidateList",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ElectionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OragnizerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "SymbolToCandidate",
      "outputs": [
        {
          "internalType": "string",
          "name": "candidateName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfVotes",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "VoterList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "addCandidates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidatesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "getCandidate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "candidateAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "numberOfVotes",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct Voting.Candidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "candidateAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "numberOfVotes",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voteSymbol",
          "type": "string"
        }
      ],
      "name": "makeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum Voting.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "symbolToVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVoters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "Voting": [
        374
      ]
    },
    "id": 375,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Voting",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 374,
        "linearizedBaseContracts": [
          374
        ],
        "name": "Voting",
        "nameLocation": "67:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Voting.Voter",
            "id": 10,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "isAVoter",
                "nameLocation": "108:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 10,
                "src": "103:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "103:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "voterName",
                "nameLocation": "133:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 10,
                "src": "126:16:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "126:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "mutability": "mutable",
                "name": "voterAddress",
                "nameLocation": "160:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 10,
                "src": "152:20:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 6,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "152:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 9,
                "mutability": "mutable",
                "name": "voted",
                "nameLocation": "187:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 10,
                "src": "182:10:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 8,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "182:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Voter",
            "nameLocation": "88:5:0",
            "nodeType": "StructDefinition",
            "scope": 374,
            "src": "81:118:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Vote",
            "id": 15,
            "members": [
              {
                "constant": false,
                "id": 12,
                "mutability": "mutable",
                "name": "voterAddress",
                "nameLocation": "234:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 15,
                "src": "226:20:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 11,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "226:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 14,
                "mutability": "mutable",
                "name": "symbol",
                "nameLocation": "263:6:0",
                "nodeType": "VariableDeclaration",
                "scope": 15,
                "src": "256:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 13,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "256:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Vote",
            "nameLocation": "212:4:0",
            "nodeType": "StructDefinition",
            "scope": 374,
            "src": "205:71:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 24,
            "members": [
              {
                "constant": false,
                "id": 17,
                "mutability": "mutable",
                "name": "candidateName",
                "nameLocation": "315:13:0",
                "nodeType": "VariableDeclaration",
                "scope": 24,
                "src": "308:20:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 16,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "308:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 19,
                "mutability": "mutable",
                "name": "candidateAddress",
                "nameLocation": "346:16:0",
                "nodeType": "VariableDeclaration",
                "scope": 24,
                "src": "338:24:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 18,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "338:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 21,
                "mutability": "mutable",
                "name": "numberOfVotes",
                "nameLocation": "380:13:0",
                "nodeType": "VariableDeclaration",
                "scope": 24,
                "src": "372:21:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 20,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "372:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23,
                "mutability": "mutable",
                "name": "symbol",
                "nameLocation": "410:6:0",
                "nodeType": "VariableDeclaration",
                "scope": 24,
                "src": "403:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 22,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "403:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "289:9:0",
            "nodeType": "StructDefinition",
            "scope": 374,
            "src": "282:141:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "12c06342",
            "id": 29,
            "mutability": "mutable",
            "name": "AddressToVoter",
            "nameLocation": "463:14:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "429:48:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
              "typeString": "mapping(address => struct Voting.Voter)"
            },
            "typeName": {
              "id": 28,
              "keyType": {
                "id": 25,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "438:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "429:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
                "typeString": "mapping(address => struct Voting.Voter)"
              },
              "valueType": {
                "id": 27,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 26,
                  "name": "Voter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10,
                  "src": "449:5:0"
                },
                "referencedDeclaration": 10,
                "src": "449:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Voter_$10_storage_ptr",
                  "typeString": "struct Voting.Voter"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "27d9f76c",
            "id": 34,
            "mutability": "mutable",
            "name": "AddressToVote",
            "nameLocation": "516:13:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "483:46:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$15_storage_$",
              "typeString": "mapping(address => struct Voting.Vote)"
            },
            "typeName": {
              "id": 33,
              "keyType": {
                "id": 30,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "492:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "483:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$15_storage_$",
                "typeString": "mapping(address => struct Voting.Vote)"
              },
              "valueType": {
                "id": 32,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 31,
                  "name": "Vote",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 15,
                  "src": "503:4:0"
                },
                "referencedDeclaration": 15,
                "src": "503:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Vote_$15_storage_ptr",
                  "typeString": "struct Voting.Vote"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 39,
            "mutability": "mutable",
            "name": "Votes",
            "nameLocation": "563:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "537:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Vote_$15_storage_$",
              "typeString": "mapping(uint256 => struct Voting.Vote)"
            },
            "typeName": {
              "id": 38,
              "keyType": {
                "id": 35,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "546:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "537:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Vote_$15_storage_$",
                "typeString": "mapping(uint256 => struct Voting.Vote)"
              },
              "valueType": {
                "id": 37,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 36,
                  "name": "Vote",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 15,
                  "src": "557:4:0"
                },
                "referencedDeclaration": 15,
                "src": "557:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Vote_$15_storage_ptr",
                  "typeString": "struct Voting.Vote"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "03a0d535",
            "id": 43,
            "mutability": "mutable",
            "name": "VoterList",
            "nameLocation": "612:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "576:45:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 42,
              "keyType": {
                "id": 40,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "585:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "576:28:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 41,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "596:7:0",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "72753be5",
            "id": 47,
            "mutability": "mutable",
            "name": "CandidateList",
            "nameLocation": "662:13:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "627:48:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 46,
              "keyType": {
                "id": 44,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "636:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "627:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 45,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "647:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "46702b16",
            "id": 52,
            "mutability": "mutable",
            "name": "SymbolToCandidate",
            "nameLocation": "718:17:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "681:54:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
              "typeString": "mapping(string => struct Voting.Candidate)"
            },
            "typeName": {
              "id": 51,
              "keyType": {
                "id": 48,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "690:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "681:29:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                "typeString": "mapping(string => struct Voting.Candidate)"
              },
              "valueType": {
                "id": 50,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 49,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24,
                  "src": "700:9:0"
                },
                "referencedDeclaration": 24,
                "src": "700:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "abf715fa",
            "id": 56,
            "mutability": "mutable",
            "name": "symbolToVotes",
            "nameLocation": "777:13:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "742:48:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_uint256_$",
              "typeString": "mapping(string => uint256)"
            },
            "typeName": {
              "id": 55,
              "keyType": {
                "id": 53,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "751:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "742:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_uint256_$",
                "typeString": "mapping(string => uint256)"
              },
              "valueType": {
                "id": 54,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "761:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2d35a8a2",
            "id": 58,
            "mutability": "mutable",
            "name": "candidatesCount",
            "nameLocation": "813:15:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "798:30:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 57,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "798:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5f5300ff",
            "id": 60,
            "mutability": "mutable",
            "name": "totalVoters",
            "nameLocation": "851:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "836:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 59,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "836:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0d15fd77",
            "id": 62,
            "mutability": "mutable",
            "name": "totalVotes",
            "nameLocation": "883:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "868:25:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 61,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "868:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.State",
            "id": 66,
            "members": [
              {
                "id": 63,
                "name": "Created",
                "nameLocation": "913:7:0",
                "nodeType": "EnumValue",
                "src": "913:7:0"
              },
              {
                "id": 64,
                "name": "Voting",
                "nameLocation": "922:6:0",
                "nodeType": "EnumValue",
                "src": "922:6:0"
              },
              {
                "id": 65,
                "name": "Ended",
                "nameLocation": "930:5:0",
                "nodeType": "EnumValue",
                "src": "930:5:0"
              }
            ],
            "name": "State",
            "nameLocation": "905:5:0",
            "nodeType": "EnumDefinition",
            "src": "900:37:0"
          },
          {
            "constant": false,
            "functionSelector": "c19d93fb",
            "id": 69,
            "mutability": "mutable",
            "name": "state",
            "nameLocation": "955:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "942:18:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_State_$66",
              "typeString": "enum Voting.State"
            },
            "typeName": {
              "id": 68,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 67,
                "name": "State",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 66,
                "src": "942:5:0"
              },
              "referencedDeclaration": 66,
              "src": "942:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_State_$66",
                "typeString": "enum Voting.State"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8949e009",
            "id": 71,
            "mutability": "mutable",
            "name": "OragnizerAddress",
            "nameLocation": "982:16:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "967:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 70,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "967:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "80843e25",
            "id": 73,
            "mutability": "mutable",
            "name": "ElectionName",
            "nameLocation": "1025:12:0",
            "nodeType": "VariableDeclaration",
            "scope": 374,
            "src": "1010:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 72,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1010:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 92,
              "nodeType": "Block",
              "src": "1085:118:0",
              "statements": [
                {
                  "expression": {
                    "id": 81,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 78,
                      "name": "OragnizerAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 71,
                      "src": "1095:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 79,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1114:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 80,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1114:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1095:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 82,
                  "nodeType": "ExpressionStatement",
                  "src": "1095:29:0"
                },
                {
                  "expression": {
                    "id": 85,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 83,
                      "name": "ElectionName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 73,
                      "src": "1134:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 84,
                      "name": "_electionName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 75,
                      "src": "1149:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1134:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 86,
                  "nodeType": "ExpressionStatement",
                  "src": "1134:28:0"
                },
                {
                  "expression": {
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 87,
                      "name": "state",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69,
                      "src": "1173:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$66",
                        "typeString": "enum Voting.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 88,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 66,
                        "src": "1181:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$66_$",
                          "typeString": "type(enum Voting.State)"
                        }
                      },
                      "id": 89,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "Created",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63,
                      "src": "1181:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$66",
                        "typeString": "enum Voting.State"
                      }
                    },
                    "src": "1173:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$66",
                      "typeString": "enum Voting.State"
                    }
                  },
                  "id": 91,
                  "nodeType": "ExpressionStatement",
                  "src": "1173:21:0"
                }
              ]
            },
            "id": 93,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75,
                  "mutability": "mutable",
                  "name": "_electionName",
                  "nameLocation": "1071:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 93,
                  "src": "1057:27:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 74,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1057:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1056:29:0"
            },
            "returnParameters": {
              "id": 77,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1085:0:0"
            },
            "scope": 374,
            "src": "1045:158:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 148,
              "nodeType": "Block",
              "src": "1354:332:0",
              "statements": [
                {
                  "assignments": [
                    110
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 110,
                      "mutability": "mutable",
                      "name": "candidate",
                      "nameLocation": "1381:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 148,
                      "src": "1364:26:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                        "typeString": "struct Voting.Candidate"
                      },
                      "typeName": {
                        "id": 109,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 108,
                          "name": "Candidate",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 24,
                          "src": "1364:9:0"
                        },
                        "referencedDeclaration": 24,
                        "src": "1364:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                          "typeString": "struct Voting.Candidate"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 111,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1364:26:0"
                },
                {
                  "expression": {
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 112,
                        "name": "candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 110,
                        "src": "1400:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                          "typeString": "struct Voting.Candidate memory"
                        }
                      },
                      "id": 114,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "candidateAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 19,
                      "src": "1400:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 115,
                      "name": "_candidateAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1429:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1400:46:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1400:46:0"
                },
                {
                  "expression": {
                    "id": 122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 118,
                        "name": "candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 110,
                        "src": "1456:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                          "typeString": "struct Voting.Candidate memory"
                        }
                      },
                      "id": 120,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "candidateName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17,
                      "src": "1456:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 121,
                      "name": "_candidateName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 97,
                      "src": "1482:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1456:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 123,
                  "nodeType": "ExpressionStatement",
                  "src": "1456:40:0"
                },
                {
                  "expression": {
                    "id": 128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 124,
                        "name": "candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 110,
                        "src": "1506:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                          "typeString": "struct Voting.Candidate memory"
                        }
                      },
                      "id": 126,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "symbol",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23,
                      "src": "1506:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 127,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 99,
                      "src": "1525:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1506:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 129,
                  "nodeType": "ExpressionStatement",
                  "src": "1506:26:0"
                },
                {
                  "expression": {
                    "id": 134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 130,
                        "name": "CandidateList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47,
                        "src": "1542:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 132,
                      "indexExpression": {
                        "id": 131,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "1556:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1542:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 133,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 99,
                      "src": "1575:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1542:40:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 135,
                  "nodeType": "ExpressionStatement",
                  "src": "1542:40:0"
                },
                {
                  "expression": {
                    "id": 140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 136,
                        "name": "SymbolToCandidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52,
                        "src": "1593:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                          "typeString": "mapping(string memory => struct Voting.Candidate storage ref)"
                        }
                      },
                      "id": 138,
                      "indexExpression": {
                        "id": 137,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 99,
                        "src": "1611:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1593:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$24_storage",
                        "typeString": "struct Voting.Candidate storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 139,
                      "name": "candidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 110,
                      "src": "1622:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                        "typeString": "struct Voting.Candidate memory"
                      }
                    },
                    "src": "1593:38:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$24_storage",
                      "typeString": "struct Voting.Candidate storage ref"
                    }
                  },
                  "id": 141,
                  "nodeType": "ExpressionStatement",
                  "src": "1593:38:0"
                },
                {
                  "expression": {
                    "id": 146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 142,
                      "name": "candidatesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 58,
                      "src": "1641:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 143,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "1659:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 144,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1677:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "1659:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1641:37:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 147,
                  "nodeType": "ExpressionStatement",
                  "src": "1641:37:0"
                }
              ]
            },
            "functionSelector": "62c49251",
            "id": 149,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 102,
                      "name": "State",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "1327:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_State_$66_$",
                        "typeString": "type(enum Voting.State)"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "Created",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 63,
                    "src": "1327:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$66",
                      "typeString": "enum Voting.State"
                    }
                  }
                ],
                "id": 104,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 101,
                  "name": "InState",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 362,
                  "src": "1319:7:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1319:22:0"
              },
              {
                "id": 106,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 105,
                  "name": "OfficialOnly",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 373,
                  "src": "1342:12:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1342:12:0"
              }
            ],
            "name": "addCandidates",
            "nameLocation": "1218:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 95,
                  "mutability": "mutable",
                  "name": "_candidateAddress",
                  "nameLocation": "1240:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1232:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 94,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1232:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 97,
                  "mutability": "mutable",
                  "name": "_candidateName",
                  "nameLocation": "1273:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1259:28:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 96,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1259:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1303:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1289:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1289:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1231:80:0"
            },
            "returnParameters": {
              "id": 107,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1354:0:0"
            },
            "scope": 374,
            "src": "1209:477:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 197,
              "nodeType": "Block",
              "src": "1758:266:0",
              "statements": [
                {
                  "assignments": [
                    160
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 160,
                      "mutability": "mutable",
                      "name": "trrips",
                      "nameLocation": "1785:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 197,
                      "src": "1766:25:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Voting.Candidate[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 158,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 157,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24,
                            "src": "1766:9:0"
                          },
                          "referencedDeclaration": 24,
                          "src": "1766:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 159,
                        "nodeType": "ArrayTypeName",
                        "src": "1766:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$24_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 167,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 165,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "1810:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "1794:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct Voting.Candidate memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 162,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 161,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 24,
                            "src": "1798:9:0"
                          },
                          "referencedDeclaration": 24,
                          "src": "1798:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 163,
                        "nodeType": "ArrayTypeName",
                        "src": "1798:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$24_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      }
                    },
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1794:32:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1766:60:0"
                },
                {
                  "body": {
                    "id": 193,
                    "nodeType": "Block",
                    "src": "1877:119:0",
                    "statements": [
                      {
                        "assignments": [
                          180
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 180,
                            "mutability": "mutable",
                            "name": "candidate",
                            "nameLocation": "1907:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "1889:27:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                              "typeString": "struct Voting.Candidate"
                            },
                            "typeName": {
                              "id": 179,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 178,
                                "name": "Candidate",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 24,
                                "src": "1889:9:0"
                              },
                              "referencedDeclaration": 24,
                              "src": "1889:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                                "typeString": "struct Voting.Candidate"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 186,
                        "initialValue": {
                          "baseExpression": {
                            "id": 181,
                            "name": "SymbolToCandidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "1919:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                              "typeString": "mapping(string memory => struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 185,
                          "indexExpression": {
                            "baseExpression": {
                              "id": 182,
                              "name": "CandidateList",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 47,
                              "src": "1937:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 184,
                            "indexExpression": {
                              "id": 183,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "1951:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1937:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1919:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$24_storage",
                            "typeString": "struct Voting.Candidate storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1889:65:0"
                      },
                      {
                        "expression": {
                          "id": 191,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 187,
                              "name": "trrips",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 160,
                              "src": "1966:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct Voting.Candidate memory[] memory"
                              }
                            },
                            "id": 189,
                            "indexExpression": {
                              "id": 188,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 169,
                              "src": "1973:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1966:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                              "typeString": "struct Voting.Candidate memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 190,
                            "name": "candidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "1978:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                              "typeString": "struct Voting.Candidate storage pointer"
                            }
                          },
                          "src": "1966:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                            "typeString": "struct Voting.Candidate memory"
                          }
                        },
                        "id": 192,
                        "nodeType": "ExpressionStatement",
                        "src": "1966:21:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 172,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 169,
                      "src": "1851:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 173,
                      "name": "candidatesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 58,
                      "src": "1855:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1851:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 194,
                  "initializationExpression": {
                    "assignments": [
                      169
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 169,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1844:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 194,
                        "src": "1839:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 168,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1839:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 171,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 170,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1848:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1839:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 176,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1872:3:0",
                      "subExpression": {
                        "id": 175,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 169,
                        "src": "1872:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 177,
                    "nodeType": "ExpressionStatement",
                    "src": "1872:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1834:162:0"
                },
                {
                  "expression": {
                    "id": 195,
                    "name": "trrips",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 160,
                    "src": "2010:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "functionReturnParameters": 155,
                  "id": 196,
                  "nodeType": "Return",
                  "src": "2003:13:0"
                }
              ]
            },
            "functionSelector": "06a49fce",
            "id": 198,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidates",
            "nameLocation": "1702:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1715:2:0"
            },
            "returnParameters": {
              "id": 155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 154,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 198,
                  "src": "1739:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$24_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 152,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 151,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 24,
                        "src": "1739:9:0"
                      },
                      "referencedDeclaration": 24,
                      "src": "1739:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 153,
                    "nodeType": "ArrayTypeName",
                    "src": "1739:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$24_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1738:20:0"
            },
            "scope": 374,
            "src": "1693:331:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 210,
              "nodeType": "Block",
              "src": "2113:50:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 206,
                      "name": "SymbolToCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52,
                      "src": "2130:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                        "typeString": "mapping(string memory => struct Voting.Candidate storage ref)"
                      }
                    },
                    "id": 208,
                    "indexExpression": {
                      "id": 207,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 200,
                      "src": "2148:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2130:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$24_storage",
                      "typeString": "struct Voting.Candidate storage ref"
                    }
                  },
                  "functionReturnParameters": 205,
                  "id": 209,
                  "nodeType": "Return",
                  "src": "2123:33:0"
                }
              ]
            },
            "functionSelector": "f276669d",
            "id": 211,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidate",
            "nameLocation": "2040:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 200,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2067:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "2053:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 199,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2053:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2052:23:0"
            },
            "returnParameters": {
              "id": 205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 204,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "2096:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Candidate_$24_memory_ptr",
                    "typeString": "struct Voting.Candidate"
                  },
                  "typeName": {
                    "id": 203,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 202,
                      "name": "Candidate",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24,
                      "src": "2096:9:0"
                    },
                    "referencedDeclaration": 24,
                    "src": "2096:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$24_storage_ptr",
                      "typeString": "struct Voting.Candidate"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2095:18:0"
            },
            "scope": 374,
            "src": "2031:132:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 270,
              "nodeType": "Block",
              "src": "2279:317:0",
              "statements": [
                {
                  "assignments": [
                    226
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 226,
                      "mutability": "mutable",
                      "name": "voter",
                      "nameLocation": "2302:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 270,
                      "src": "2289:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 225,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 224,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 10,
                          "src": "2289:5:0"
                        },
                        "referencedDeclaration": 10,
                        "src": "2289:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 227,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2289:18:0"
                },
                {
                  "expression": {
                    "id": 232,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 228,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 226,
                        "src": "2317:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                          "typeString": "struct Voting.Voter memory"
                        }
                      },
                      "id": 230,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "isAVoter",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3,
                      "src": "2317:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 231,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2334:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2317:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 233,
                  "nodeType": "ExpressionStatement",
                  "src": "2317:21:0"
                },
                {
                  "expression": {
                    "id": 238,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 234,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 226,
                        "src": "2348:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                          "typeString": "struct Voting.Voter memory"
                        }
                      },
                      "id": 236,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voterAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "2348:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 237,
                      "name": "_voterAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 213,
                      "src": "2369:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2348:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 239,
                  "nodeType": "ExpressionStatement",
                  "src": "2348:34:0"
                },
                {
                  "expression": {
                    "id": 244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 240,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 226,
                        "src": "2392:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                          "typeString": "struct Voting.Voter memory"
                        }
                      },
                      "id": 242,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voterName",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5,
                      "src": "2392:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 243,
                      "name": "_voterName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 215,
                      "src": "2410:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2392:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 245,
                  "nodeType": "ExpressionStatement",
                  "src": "2392:28:0"
                },
                {
                  "expression": {
                    "id": 250,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 246,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 226,
                        "src": "2430:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                          "typeString": "struct Voting.Voter memory"
                        }
                      },
                      "id": 248,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9,
                      "src": "2430:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 249,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2444:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2430:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 251,
                  "nodeType": "ExpressionStatement",
                  "src": "2430:19:0"
                },
                {
                  "expression": {
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 252,
                        "name": "AddressToVoter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29,
                        "src": "2460:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
                          "typeString": "mapping(address => struct Voting.Voter storage ref)"
                        }
                      },
                      "id": 254,
                      "indexExpression": {
                        "id": 253,
                        "name": "_voterAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 213,
                        "src": "2475:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2460:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$10_storage",
                        "typeString": "struct Voting.Voter storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 255,
                      "name": "voter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 226,
                      "src": "2492:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$10_memory_ptr",
                        "typeString": "struct Voting.Voter memory"
                      }
                    },
                    "src": "2460:37:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$10_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "id": 257,
                  "nodeType": "ExpressionStatement",
                  "src": "2460:37:0"
                },
                {
                  "expression": {
                    "id": 262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 258,
                        "name": "VoterList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "2507:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 260,
                      "indexExpression": {
                        "id": 259,
                        "name": "totalVoters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "2517:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2507:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 261,
                      "name": "_voterAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 213,
                      "src": "2532:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2507:38:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 263,
                  "nodeType": "ExpressionStatement",
                  "src": "2507:38:0"
                },
                {
                  "expression": {
                    "id": 268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 264,
                      "name": "totalVoters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60,
                      "src": "2555:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 267,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 265,
                        "name": "totalVoters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "2569:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2583:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "2569:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2555:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 269,
                  "nodeType": "ExpressionStatement",
                  "src": "2555:29:0"
                }
              ]
            },
            "functionSelector": "d9e95a98",
            "id": 271,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 218,
                      "name": "State",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "2251:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_State_$66_$",
                        "typeString": "type(enum Voting.State)"
                      }
                    },
                    "id": 219,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "Created",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 63,
                    "src": "2251:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$66",
                      "typeString": "enum Voting.State"
                    }
                  }
                ],
                "id": 220,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 217,
                  "name": "InState",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 362,
                  "src": "2243:7:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "2243:22:0"
              },
              {
                "id": 222,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 221,
                  "name": "OfficialOnly",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 373,
                  "src": "2266:12:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "2266:12:0"
              }
            ],
            "name": "addVoter",
            "nameLocation": "2178:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 213,
                  "mutability": "mutable",
                  "name": "_voterAddress",
                  "nameLocation": "2195:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 271,
                  "src": "2187:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 212,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2187:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 215,
                  "mutability": "mutable",
                  "name": "_voterName",
                  "nameLocation": "2224:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 271,
                  "src": "2210:24:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 214,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2210:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2186:49:0"
            },
            "returnParameters": {
              "id": 223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2279:0:0"
            },
            "scope": 374,
            "src": "2169:427:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 348,
              "nodeType": "Block",
              "src": "2655:516:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 277,
                            "name": "AddressToVoter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29,
                            "src": "2673:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 280,
                          "indexExpression": {
                            "expression": {
                              "id": 278,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2688:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 279,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2688:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2673:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$10_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 281,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isAVoter",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3,
                        "src": "2673:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f742072656769737465726564",
                        "id": 282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2709:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1eb9ad53e16416e14d33846438c096000c11083a5bcbbae89aefd174c6489af5",
                          "typeString": "literal_string \"Not registered\""
                        },
                        "value": "Not registered"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1eb9ad53e16416e14d33846438c096000c11083a5bcbbae89aefd174c6489af5",
                          "typeString": "literal_string \"Not registered\""
                        }
                      ],
                      "id": 276,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2665:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2665:61:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "2665:61:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 291,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 285,
                          "name": "AddressToVoter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "2739:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 288,
                        "indexExpression": {
                          "expression": {
                            "id": 286,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2754:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2754:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2739:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$10_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 289,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "voted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9,
                      "src": "2739:32:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 290,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2775:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2739:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 347,
                  "nodeType": "IfStatement",
                  "src": "2736:429:0",
                  "trueBody": {
                    "id": 346,
                    "nodeType": "Block",
                    "src": "2781:384:0",
                    "statements": [
                      {
                        "assignments": [
                          294
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 294,
                            "mutability": "mutable",
                            "name": "vote",
                            "nameLocation": "2803:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 346,
                            "src": "2791:16:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Vote_$15_memory_ptr",
                              "typeString": "struct Voting.Vote"
                            },
                            "typeName": {
                              "id": 293,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 292,
                                "name": "Vote",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 15,
                                "src": "2791:4:0"
                              },
                              "referencedDeclaration": 15,
                              "src": "2791:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Vote_$15_storage_ptr",
                                "typeString": "struct Voting.Vote"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 295,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2791:16:0"
                      },
                      {
                        "expression": {
                          "id": 301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 296,
                              "name": "vote",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "2817:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Vote_$15_memory_ptr",
                                "typeString": "struct Voting.Vote memory"
                              }
                            },
                            "id": 298,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "voterAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "2817:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 299,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2837:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2837:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2817:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 302,
                        "nodeType": "ExpressionStatement",
                        "src": "2817:30:0"
                      },
                      {
                        "expression": {
                          "id": 307,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 303,
                              "name": "vote",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "2857:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Vote_$15_memory_ptr",
                                "typeString": "struct Voting.Vote memory"
                              }
                            },
                            "id": 305,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "symbol",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14,
                            "src": "2857:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 306,
                            "name": "_voteSymbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 273,
                            "src": "2871:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "2857:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "id": 308,
                        "nodeType": "ExpressionStatement",
                        "src": "2857:25:0"
                      },
                      {
                        "expression": {
                          "id": 314,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 309,
                              "name": "AddressToVote",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34,
                              "src": "2893:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$15_storage_$",
                                "typeString": "mapping(address => struct Voting.Vote storage ref)"
                              }
                            },
                            "id": 312,
                            "indexExpression": {
                              "expression": {
                                "id": 310,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2907:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2907:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2893:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Vote_$15_storage",
                              "typeString": "struct Voting.Vote storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 313,
                            "name": "vote",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "2921:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Vote_$15_memory_ptr",
                              "typeString": "struct Voting.Vote memory"
                            }
                          },
                          "src": "2893:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Vote_$15_storage",
                            "typeString": "struct Voting.Vote storage ref"
                          }
                        },
                        "id": 315,
                        "nodeType": "ExpressionStatement",
                        "src": "2893:32:0"
                      },
                      {
                        "expression": {
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 316,
                                "name": "SymbolToCandidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 52,
                                "src": "2936:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                                  "typeString": "mapping(string memory => struct Voting.Candidate storage ref)"
                                }
                              },
                              "id": 318,
                              "indexExpression": {
                                "id": 317,
                                "name": "_voteSymbol",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 273,
                                "src": "2954:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2936:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$24_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 319,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "numberOfVotes",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 21,
                            "src": "2936:44:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 320,
                                  "name": "SymbolToCandidate",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 52,
                                  "src": "2983:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Candidate_$24_storage_$",
                                    "typeString": "mapping(string memory => struct Voting.Candidate storage ref)"
                                  }
                                },
                                "id": 322,
                                "indexExpression": {
                                  "id": 321,
                                  "name": "_voteSymbol",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 273,
                                  "src": "3001:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2983:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Candidate_$24_storage",
                                  "typeString": "struct Voting.Candidate storage ref"
                                }
                              },
                              "id": 323,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "numberOfVotes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 21,
                              "src": "2983:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 324,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3030:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "2983:48:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2936:95:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 327,
                        "nodeType": "ExpressionStatement",
                        "src": "2936:95:0"
                      },
                      {
                        "expression": {
                          "id": 336,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 328,
                              "name": "symbolToVotes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "3041:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_uint256_$",
                                "typeString": "mapping(string memory => uint256)"
                              }
                            },
                            "id": 330,
                            "indexExpression": {
                              "id": 329,
                              "name": "_voteSymbol",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 273,
                              "src": "3055:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3041:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 335,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "baseExpression": {
                                "id": 331,
                                "name": "symbolToVotes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "3070:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_uint256_$",
                                  "typeString": "mapping(string memory => uint256)"
                                }
                              },
                              "id": 333,
                              "indexExpression": {
                                "id": 332,
                                "name": "_voteSymbol",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 273,
                                "src": "3084:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3070:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 334,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3099:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "3070:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3041:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 337,
                        "nodeType": "ExpressionStatement",
                        "src": "3041:59:0"
                      },
                      {
                        "expression": {
                          "id": 344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 338,
                                "name": "AddressToVoter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 29,
                                "src": "3115:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$10_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 341,
                              "indexExpression": {
                                "expression": {
                                  "id": 339,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "3130:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 340,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3130:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3115:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$10_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 342,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "voted",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 9,
                            "src": "3115:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 343,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3150:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3115:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 345,
                        "nodeType": "ExpressionStatement",
                        "src": "3115:39:0"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "ef002423",
            "id": 349,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "makeVote",
            "nameLocation": "2612:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 273,
                  "mutability": "mutable",
                  "name": "_voteSymbol",
                  "nameLocation": "2635:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 349,
                  "src": "2621:25:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 272,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2621:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2620:27:0"
            },
            "returnParameters": {
              "id": 275,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2655:0:0"
            },
            "scope": 374,
            "src": "2603:568:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 361,
              "nodeType": "Block",
              "src": "3210:52:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$66",
                          "typeString": "enum Voting.State"
                        },
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 355,
                          "name": "state",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "3228:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$66",
                            "typeString": "enum Voting.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 356,
                          "name": "_state",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 352,
                          "src": "3237:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$66",
                            "typeString": "enum Voting.State"
                          }
                        },
                        "src": "3228:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 354,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3220:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 358,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3220:24:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 359,
                  "nodeType": "ExpressionStatement",
                  "src": "3220:24:0"
                },
                {
                  "id": 360,
                  "nodeType": "PlaceholderStatement",
                  "src": "3254:1:0"
                }
              ]
            },
            "id": 362,
            "name": "InState",
            "nameLocation": "3189:7:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 353,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 352,
                  "mutability": "mutable",
                  "name": "_state",
                  "nameLocation": "3203:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "3197:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$66",
                    "typeString": "enum Voting.State"
                  },
                  "typeName": {
                    "id": 351,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 350,
                      "name": "State",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66,
                      "src": "3197:5:0"
                    },
                    "referencedDeclaration": 66,
                    "src": "3197:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$66",
                      "typeString": "enum Voting.State"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3196:14:0"
            },
            "src": "3180:82:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 372,
              "nodeType": "Block",
              "src": "3292:68:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 368,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 365,
                          "name": "OragnizerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 71,
                          "src": "3311:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 366,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3331:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 367,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3331:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3311:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 364,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3302:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3302:40:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 370,
                  "nodeType": "ExpressionStatement",
                  "src": "3302:40:0"
                },
                {
                  "id": 371,
                  "nodeType": "PlaceholderStatement",
                  "src": "3352:1:0"
                }
              ]
            },
            "id": 373,
            "name": "OfficialOnly",
            "nameLocation": "3277:12:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 363,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3290:2:0"
            },
            "src": "3268:92:0",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 375,
        "src": "58:3307:0",
        "usedErrors": []
      }
    ],
    "src": "32:3337:0"
  },
  "bytecode": "60806040523480156200001157600080fd5b506040516200166f3803806200166f83398101604081905262000034916200012e565b600a8054610100600160a81b031916336101000217905580516200006090600b90602084019062000072565b5050600a805460ff1916905562000246565b82805462000080906200020a565b90600052602060002090601f016020900481019282620000a45760008555620000ef565b82601f10620000bf57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ef578251825591602001919060010190620000d2565b50620000fd92915062000101565b5090565b5b80821115620000fd576000815560010162000102565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200014257600080fd5b82516001600160401b03808211156200015a57600080fd5b818501915085601f8301126200016f57600080fd5b81518181111562000184576200018462000118565b604051601f8201601f19908116603f01168101908382118183101715620001af57620001af62000118565b816040528281528886848701011115620001c857600080fd5b600093505b82841015620001ec5784840186015181850187015292850192620001cd565b82841115620001fe5760008684830101525b98975050505050505050565b600181811c908216806200021f57607f821691505b6020821081036200024057634e487b7160e01b600052602260045260246000fd5b50919050565b61141980620002566000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806362c49251116100a2578063abf715fa11610071578063abf715fa14610250578063c19d93fb1461027b578063d9e95a9814610295578063ef002423146102a8578063f276669d146102bb57600080fd5b806362c49251146101fb57806372753be51461021057806380843e25146102305780638949e0091461023857600080fd5b806327d9f76c116100de57806327d9f76c146101a55780632d35a8a2146101c657806346702b16146101cf5780635f5300ff146101f257600080fd5b806303a0d5351461011057806306a49fce146101565780630d15fd771461016b57806312c0634214610182575b600080fd5b61013961011e366004610e87565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015e6102db565b60405161014d9190610f4f565b61017460095481565b60405190815260200161014d565b610195610190366004610fcd565b6104f8565b60405161014d9493929190610fef565b6101b86101b3366004610fcd565b6105bd565b60405161014d92919061102b565b61017460075481565b6101e26101dd3660046110fa565b61066d565b60405161014d949392919061112f565b61017460085481565b61020e610209366004611175565b6107be565b005b61022361021e366004610e87565b6108e1565b60405161014d91906111e9565b61022361097b565b600a546101399061010090046001600160a01b031681565b61017461025e3660046110fa565b805160208183018101805160068252928201919093012091525481565b600a546102889060ff1681565b60405161014d9190611212565b61020e6102a336600461123a565b610988565b61020e6102b63660046110fa565b610aa2565b6102ce6102c93660046110fa565b610c40565b60405161014d9190611288565b6060600060075467ffffffffffffffff8111156102fa576102fa611057565b60405190808252806020026020018201604052801561033357816020015b610320610dbd565b8152602001906001900390816103185790505b50905060005b6007548110156104f2576000818152600460205260408082209051600591610360916112cf565b908152602001604051809103902090508060405180608001604052908160008201805461038c9061129b565b80601f01602080910402602001604051908101604052809291908181526020018280546103b89061129b565b80156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b505050918352505060018201546001600160a01b031660208201526002820154604082015260038201805460609092019161043f9061129b565b80601f016020809104026020016040519081016040528092919081815260200182805461046b9061129b565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b5050505050815250508383815181106104d3576104d361136a565b60200260200101819052505080806104ea90611396565b915050610339565b50919050565b6000602081905290815260409020805460018201805460ff909216929161051e9061129b565b80601f016020809104026020016040519081016040528092919081815260200182805461054a9061129b565b80156105975780601f1061056c57610100808354040283529160200191610597565b820191906000526020600020905b81548152906001019060200180831161057a57829003601f168201915b505050600290930154919250506001600160a01b0381169060ff600160a01b9091041684565b6001602081905260009182526040909120805491810180546001600160a01b03909316926105ea9061129b565b80601f01602080910402602001604051908101604052809291908181526020018280546106169061129b565b80156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b5050505050905082565b80516020818301810180516005825292820191909301209152805481906106939061129b565b80601f01602080910402602001604051908101604052809291908181526020018280546106bf9061129b565b801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b505050506001830154600284015460038501805494956001600160a01b03909316949193509061073b9061129b565b80601f01602080910402602001604051908101604052809291908181526020018280546107679061129b565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b5050505050905084565b600080600a5460ff1660028111156107d8576107d86111fc565b146107e257600080fd5b600a5461010090046001600160a01b031633146107fe57600080fd5b610806610dbd565b6001600160a01b0385166020808301919091528482526060820184905260075460009081526004825260409020845161084192860190610dee565b508060058460405161085391906113af565b9081526020016040518091039020600082015181600001908051906020019061087d929190610dee565b506020828101516001830180546001600160a01b0319166001600160a01b0390921691909117905560408301516002830155606083015180516108c69260038501920190610dee565b50506007546108d7915060016113cb565b6007555050505050565b600460205260009081526040902080546108fa9061129b565b80601f01602080910402602001604051908101604052809291908181526020018280546109269061129b565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b505050505081565b600b80546108fa9061129b565b600080600a5460ff1660028111156109a2576109a26111fc565b146109ac57600080fd5b600a5461010090046001600160a01b031633146109c857600080fd5b6040805160808101825260006060820181905260018083526001600160a01b0387168385018190526020808501888152918452838152949092208351815460ff19169015151781559151805193948594610a289385019290910190610dee565b50604082810151600290920180546060909401511515600160a01b026001600160a81b03199094166001600160a01b03938416179390931790925560088054600090815260036020529290922080549187166001600160a01b03199290921691909117905554610a999060016113cb565b60085550505050565b3360009081526020819052604090205460ff16610af65760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b604482015260640160405180910390fd5b33600090815260208190526040812060020154600160a01b900460ff1615159003610c3d576040805180820182523380825260208083018581526000928352600180835294909220835181546001600160a01b0319166001600160a01b039091161781559151805193948594610b73939185019290910190610dee565b50905050600582604051610b8791906113af565b9081526020016040518091039020600201546001610ba591906113cb565b600583604051610bb591906113af565b908152602001604051809103902060020181905550600682604051610bda91906113af565b9081526020016040518091039020546001610bf591906113cb565b600683604051610c0591906113af565b90815260408051918290036020908101909220929092553360009081529081905220600201805460ff60a01b1916600160a01b179055505b50565b610c48610dbd565b600582604051610c5891906113af565b9081526020016040518091039020604051806080016040529081600082018054610c819061129b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad9061129b565b8015610cfa5780601f10610ccf57610100808354040283529160200191610cfa565b820191906000526020600020905b815481529060010190602001808311610cdd57829003601f168201915b505050918352505060018201546001600160a01b0316602082015260028201546040820152600382018054606090920191610d349061129b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d609061129b565b8015610dad5780601f10610d8257610100808354040283529160200191610dad565b820191906000526020600020905b815481529060010190602001808311610d9057829003601f168201915b5050505050815250509050919050565b60405180608001604052806060815260200160006001600160a01b0316815260200160008152602001606081525090565b828054610dfa9061129b565b90600052602060002090601f016020900481019282610e1c5760008555610e62565b82601f10610e3557805160ff1916838001178555610e62565b82800160010185558215610e62579182015b82811115610e62578251825591602001919060010190610e47565b50610e6e929150610e72565b5090565b5b80821115610e6e5760008155600101610e73565b600060208284031215610e9957600080fd5b5035919050565b60005b83811015610ebb578181015183820152602001610ea3565b83811115610eca576000848401525b50505050565b60008151808452610ee8816020860160208601610ea0565b601f01601f19169290920160200192915050565b6000815160808452610f116080850182610ed0565b905060018060a01b0360208401511660208501526040830151604085015260608301518482036060860152610f468282610ed0565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610fa457603f19888603018452610f92858351610efc565b94509285019290850190600101610f76565b5092979650505050505050565b80356001600160a01b0381168114610fc857600080fd5b919050565b600060208284031215610fdf57600080fd5b610fe882610fb1565b9392505050565b841515815260806020820152600061100a6080830186610ed0565b6001600160a01b039490941660408301525090151560609091015292915050565b6001600160a01b038316815260406020820181905260009061104f90830184610ed0565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261107e57600080fd5b813567ffffffffffffffff8082111561109957611099611057565b604051601f8301601f19908116603f011681019082821181831017156110c1576110c1611057565b816040528381528660208588010111156110da57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561110c57600080fd5b813567ffffffffffffffff81111561112357600080fd5b61104f8482850161106d565b6080815260006111426080830187610ed0565b6001600160a01b038616602084015260408301859052828103606084015261116a8185610ed0565b979650505050505050565b60008060006060848603121561118a57600080fd5b61119384610fb1565b9250602084013567ffffffffffffffff808211156111b057600080fd5b6111bc8783880161106d565b935060408601359150808211156111d257600080fd5b506111df8682870161106d565b9150509250925092565b602081526000610fe86020830184610ed0565b634e487b7160e01b600052602160045260246000fd5b602081016003831061123457634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561124d57600080fd5b61125683610fb1565b9150602083013567ffffffffffffffff81111561127257600080fd5b61127e8582860161106d565b9150509250929050565b602081526000610fe86020830184610efc565b600181811c908216806112af57607f821691505b6020821081036104f257634e487b7160e01b600052602260045260246000fd5b600080835481600182811c9150808316806112eb57607f831692505b6020808410820361130a57634e487b7160e01b86526022600452602486fd5b81801561131e576001811461132f5761135c565b60ff1986168952848901965061135c565b60008a81526020902060005b868110156113545781548b82015290850190830161133b565b505084890196505b509498975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113a8576113a8611380565b5060010190565b600082516113c1818460208701610ea0565b9190910192915050565b600082198211156113de576113de611380565b50019056fea26469706673582212201ccb86685834da05e783c795e380b14d4c50828b6d7810e2188c0ef8f16aebab64736f6c634300080d0033",
  "bytecodeSha1": "9a54ed1198e740ad3deba5999dfdbf07bc32230f",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.addVoter": {
          "23": [
            3228,
            3243,
            true
          ]
        },
        "Voting.makeVote": {
          "24": [
            2673,
            2708,
            true
          ],
          "25": [
            2739,
            2780,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.addCandidates": {
          "3": [
            1400,
            1446
          ],
          "4": [
            1456,
            1496
          ],
          "5": [
            1506,
            1532
          ],
          "6": [
            1542,
            1582
          ],
          "7": [
            1593,
            1631
          ],
          "8": [
            1641,
            1678
          ]
        },
        "Voting.addVoter": {
          "9": [
            2317,
            2338
          ],
          "10": [
            2348,
            2382
          ],
          "11": [
            2392,
            2420
          ],
          "12": [
            2460,
            2497
          ],
          "13": [
            2507,
            2545
          ],
          "14": [
            2555,
            2584
          ]
        },
        "Voting.getCandidate": {
          "22": [
            2123,
            2156
          ]
        },
        "Voting.getCandidates": {
          "0": [
            1966,
            1987
          ],
          "1": [
            1872,
            1875
          ],
          "2": [
            2003,
            2016
          ]
        },
        "Voting.makeVote": {
          "15": [
            2665,
            2726
          ],
          "16": [
            2817,
            2847
          ],
          "17": [
            2857,
            2882
          ],
          "18": [
            2893,
            2925
          ],
          "19": [
            2936,
            3031
          ],
          "20": [
            3041,
            3100
          ],
          "21": [
            3115,
            3154
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "",
  "deployedSourceMap": "58:3307:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:45;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;576:45:0;;;;;;-1:-1:-1;;;;;363:32:1;;;345:51;;333:2;318:18;576:45:0;;;;;;;;1693:331;;;:::i;:::-;;;;;;;:::i;868:25::-;;;;;;;;;2428::1;;;2416:2;2401:18;868:25:0;2282:177:1;429:48:0;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;483:46::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;798:30::-;;;;;;681:54;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;836:26::-;;;;;;1209:477;;;;;;:::i;:::-;;:::i;:::-;;627:48;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1010:27::-;;;:::i;967:31::-;;;;;;;;-1:-1:-1;;;;;967:31:0;;;742:48;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;942:18;;;;;;;;;;;;;;;;:::i;2169:427::-;;;;;;:::i;:::-;;:::i;2603:568::-;;;;;;:::i;:::-;;:::i;2031:132::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1693:331::-;1739:18;1766:25;1810:15;;1794:32;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1766:60;;1839:6;1834:162;1855:15;;1851:1;:19;1834:162;;;1889:27;1937:16;;;:13;:16;;;;;;1919:35;;:17;;:35;;;:::i;:::-;;;;;;;;;;;;;1889:65;;1978:9;1966:21;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1966:21:0;;;-1:-1:-1;;1966:21:0;;;;-1:-1:-1;;;;;1966:21:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;1973:1;1966:9;;;;;;;;:::i;:::-;;;;;;:21;;;;1877:119;1872:3;;;;;:::i;:::-;;;;1834:162;;;-1:-1:-1;2010:6:0;1693:331;-1:-1:-1;1693:331:0:o;429:48::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;429:48:0;;;;;;;-1:-1:-1;;;;;;;429:48:0;;;;-1:-1:-1;;;429:48:0;;;;;:::o;483:46::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;483:46:0;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;681:54::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;681:54:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;681:54:0;;;;;;-1:-1:-1;681:54:0;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1209:477::-;1327:13;;3228:5;;;;:15;;;;;;;;:::i;:::-;;3220:24;;;;;;3311:16:::1;::::0;::::1;::::0;::::1;-1:-1:-1::0;;;;;3311:16:0::1;3331:10;3311:30;3302:40;;;::::0;::::1;;1364:26:::2;;:::i;:::-;-1:-1:-1::0;;;;;1400:46:0;::::2;:26;::::0;;::::2;:46:::0;;;;1456:40;;;1506:16:::2;::::0;::::2;:26:::0;;;1556:15:::2;::::0;1456:23:::2;1542:30:::0;;;:13:::2;:30:::0;;;;;:40;;::::2;::::0;;::::2;::::0;::::2;:::i;:::-;;1622:9;1593:17;1611:7;1593:26;;;;;;:::i;:::-;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;1593:38:0::2;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;;-1:-1:-1;;;;;;1593:38:0::2;-1:-1:-1::0;;;;;1593:38:0;;::::2;::::0;;;::::2;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;;;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;;1659:15:0::2;::::0;:19:::2;::::0;-1:-1:-1;1677:1:0::2;1659:19;:::i;:::-;1641:15;:37:::0;-1:-1:-1;;;;;1209:477:0:o;627:48::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1010:27::-;;;;;;;:::i;2169:427::-;2251:13;;3228:5;;;;:15;;;;;;;;:::i;:::-;;3220:24;;;;;;3311:16:::1;::::0;::::1;::::0;::::1;-1:-1:-1::0;;;;;3311:16:0::1;3331:10;3311:30;3302:40;;;::::0;::::1;;-1:-1:-1::0;;;;;;;;;;;;;;;2334:4:0::2;2317:21:::0;;;-1:-1:-1;;;;;2348:34:0;::::2;-1:-1:-1::0;;;2348:34:0;;;-1:-1:-1;;;;2392:28:0;;;2460:29;;;;;;;;;;:37;;;;-1:-1:-1;;2460:37:0::2;::::0;::::2;;;::::0;;;;;;-1:-1:-1;;;;2460:37:0::2;::::0;;::::2;::::0;;;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;2460:37:0::2;::::0;;::::2;::::0;::::2;::::0;;::::2;::::0;;::::2;::::0;;::::2;::::0;::::2;;-1:-1:-1::0;;;2460:37:0::2;-1:-1:-1::0;;;;;;2460:37:0;;;-1:-1:-1;;;;;2460:37:0;;::::2;::::0;;;;::::2;::::0;;;2517:11:::2;::::0;;2460:37:::2;2507:22:::0;;;:9:::2;:22;::::0;;;;;:38;;;;::::2;-1:-1:-1::0;;;;;;2507:38:0;;;::::2;::::0;;;::::2;::::0;;2569:11;:15:::2;::::0;2460:37;2569:15:::2;:::i;:::-;2555:11;:29:::0;-1:-1:-1;;;;2169:427:0:o;2603:568::-;2688:10;2673:14;:26;;;;;;;;;;:35;;;2665:61;;;;-1:-1:-1;;;2665:61:0;;10003:2:1;2665:61:0;;;9985:21:1;10042:2;10022:18;;;10015:30;-1:-1:-1;;;10061:18:1;;;10054:44;10115:18;;2665:61:0;;;;;;;;2754:10;2739:14;:26;;;;;;;;;;:32;;;-1:-1:-1;;;2739:32:0;;;;:41;;;;2736:429;;-1:-1:-1;;;;;;;;2837:10:0;2817:30;;;-1:-1:-1;;;;2857:25:0;;;-1:-1:-1;2893:25:0;;;:13;:25;;;;;;;:32;;;;-1:-1:-1;;;;;;2893:32:0;-1:-1:-1;;;;;2893:32:0;;;;;;;;;;-1:-1:-1;;;;2893:32:0;;;;;;;;;;;:::i;:::-;;;;;2983:17;3001:11;2983:30;;;;;;:::i;:::-;;;;;;;;;;;;;:44;;;3030:1;2983:48;;;;:::i;:::-;2936:17;2954:11;2936:30;;;;;;:::i;:::-;;;;;;;;;;;;;:44;;:95;;;;3070:13;3084:11;3070:26;;;;;;:::i;:::-;;;;;;;;;;;;;;3099:1;3070:30;;;;:::i;:::-;3041:13;3055:11;3041:26;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:59;;;;3130:10;3115:14;:26;;;;;;;;:32;;:39;;-1:-1:-1;;;;3115:39:0;-1:-1:-1;;;3115:39:0;;;-1:-1:-1;2736:429:0;2603:568;:::o;2031:132::-;2096:16;;:::i;:::-;2130:17;2148:7;2130:26;;;;;;:::i;:::-;;;;;;;;;;;;;2123:33;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2123:33:0;;;-1:-1:-1;;2123:33:0;;;;-1:-1:-1;;;;;2123:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2031:132;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:1;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;407:258::-;479:1;489:113;503:6;500:1;497:13;489:113;;;579:11;;;573:18;560:11;;;553:39;525:2;518:10;489:113;;;620:6;617:1;614:13;611:48;;;655:1;646:6;641:3;637:16;630:27;611:48;;407:258;;;:::o;670:::-;712:3;750:5;744:12;777:6;772:3;765:19;793:63;849:6;842:4;837:3;833:14;826:4;819:5;815:16;793:63;:::i;:::-;910:2;889:15;-1:-1:-1;;885:29:1;876:39;;;;917:4;872:50;;670:258;-1:-1:-1;;670:258:1:o;933:496::-;985:3;1029:5;1023:12;1056:4;1051:3;1044:17;1082:47;1123:4;1118:3;1114:14;1100:12;1082:47;:::i;:::-;1070:59;;1207:1;1203;1198:3;1194:11;1190:19;1182:4;1175:5;1171:16;1165:23;1161:49;1154:4;1149:3;1145:14;1138:73;1260:4;1253:5;1249:16;1243:23;1236:4;1231:3;1227:14;1220:47;1315:4;1308:5;1304:16;1298:23;1363:3;1357:4;1353:14;1346:4;1341:3;1337:14;1330:38;1384:39;1418:4;1402:14;1384:39;:::i;:::-;1377:46;933:496;-1:-1:-1;;;;;933:496:1:o;1434:843::-;1626:4;1655:2;1695;1684:9;1680:18;1725:2;1714:9;1707:21;1748:6;1783;1777:13;1814:6;1806;1799:22;1852:2;1841:9;1837:18;1830:25;;1914:2;1904:6;1901:1;1897:14;1886:9;1882:30;1878:39;1864:53;;1952:2;1944:6;1940:15;1973:1;1983:265;1997:6;1994:1;1991:13;1983:265;;;2090:2;2086:7;2074:9;2066:6;2062:22;2058:36;2053:3;2046:49;2118:50;2161:6;2152;2146:13;2118:50;:::i;:::-;2108:60;-1:-1:-1;2226:12:1;;;;2191:15;;;;2019:1;2012:9;1983:265;;;-1:-1:-1;2265:6:1;;1434:843;-1:-1:-1;;;;;;;1434:843:1:o;2464:173::-;2532:20;;-1:-1:-1;;;;;2581:31:1;;2571:42;;2561:70;;2627:1;2624;2617:12;2561:70;2464:173;;;:::o;2642:186::-;2701:6;2754:2;2742:9;2733:7;2729:23;2725:32;2722:52;;;2770:1;2767;2760:12;2722:52;2793:29;2812:9;2793:29;:::i;:::-;2783:39;2642:186;-1:-1:-1;;;2642:186:1:o;2833:481::-;3068:6;3061:14;3054:22;3043:9;3036:41;3113:3;3108:2;3097:9;3093:18;3086:31;3017:4;3134:46;3175:3;3164:9;3160:19;3152:6;3134:46;:::i;:::-;-1:-1:-1;;;;;3216:32:1;;;;3211:2;3196:18;;3189:60;-1:-1:-1;3292:14:1;;3285:22;3280:2;3265:18;;;3258:50;3126:54;2833:481;-1:-1:-1;;2833:481:1:o;3319:317::-;-1:-1:-1;;;;;3496:32:1;;3478:51;;3565:2;3560;3545:18;;3538:30;;;-1:-1:-1;;3585:45:1;;3611:18;;3603:6;3585:45;:::i;:::-;3577:53;3319:317;-1:-1:-1;;;;3319:317:1:o;3641:127::-;3702:10;3697:3;3693:20;3690:1;3683:31;3733:4;3730:1;3723:15;3757:4;3754:1;3747:15;3773:719;3816:5;3869:3;3862:4;3854:6;3850:17;3846:27;3836:55;;3887:1;3884;3877:12;3836:55;3923:6;3910:20;3949:18;3986:2;3982;3979:10;3976:36;;;3992:18;;:::i;:::-;4067:2;4061:9;4035:2;4121:13;;-1:-1:-1;;4117:22:1;;;4141:2;4113:31;4109:40;4097:53;;;4165:18;;;4185:22;;;4162:46;4159:72;;;4211:18;;:::i;:::-;4251:10;4247:2;4240:22;4286:2;4278:6;4271:18;4332:3;4325:4;4320:2;4312:6;4308:15;4304:26;4301:35;4298:55;;;4349:1;4346;4339:12;4298:55;4413:2;4406:4;4398:6;4394:17;4387:4;4379:6;4375:17;4362:54;4460:1;4453:4;4448:2;4440:6;4436:15;4432:26;4425:37;4480:6;4471:15;;;;;;3773:719;;;;:::o;4497:322::-;4566:6;4619:2;4607:9;4598:7;4594:23;4590:32;4587:52;;;4635:1;4632;4625:12;4587:52;4675:9;4662:23;4708:18;4700:6;4697:30;4694:50;;;4740:1;4737;4730:12;4694:50;4763;4805:7;4796:6;4785:9;4781:22;4763:50;:::i;4824:553::-;5077:3;5066:9;5059:22;5040:4;5104:46;5145:3;5134:9;5130:19;5122:6;5104:46;:::i;:::-;-1:-1:-1;;;;;5186:32:1;;5181:2;5166:18;;5159:60;5250:2;5235:18;;5228:34;;;5298:22;;;5293:2;5278:18;;5271:50;5338:33;5302:6;5356;5338:33;:::i;:::-;5330:41;4824:553;-1:-1:-1;;;;;;;4824:553:1:o;5382:617::-;5479:6;5487;5495;5548:2;5536:9;5527:7;5523:23;5519:32;5516:52;;;5564:1;5561;5554:12;5516:52;5587:29;5606:9;5587:29;:::i;:::-;5577:39;;5667:2;5656:9;5652:18;5639:32;5690:18;5731:2;5723:6;5720:14;5717:34;;;5747:1;5744;5737:12;5717:34;5770:50;5812:7;5803:6;5792:9;5788:22;5770:50;:::i;:::-;5760:60;;5873:2;5862:9;5858:18;5845:32;5829:48;;5902:2;5892:8;5889:16;5886:36;;;5918:1;5915;5908:12;5886:36;;5941:52;5985:7;5974:8;5963:9;5959:24;5941:52;:::i;:::-;5931:62;;;5382:617;;;;;:::o;6004:220::-;6153:2;6142:9;6135:21;6116:4;6173:45;6214:2;6203:9;6199:18;6191:6;6173:45;:::i;6229:127::-;6290:10;6285:3;6281:20;6278:1;6271:31;6321:4;6318:1;6311:15;6345:4;6342:1;6335:15;6361:336;6501:2;6486:18;;6534:1;6523:13;;6513:144;;6579:10;6574:3;6570:20;6567:1;6560:31;6614:4;6611:1;6604:15;6642:4;6639:1;6632:15;6513:144;6666:25;;;6361:336;:::o;6702:396::-;6780:6;6788;6841:2;6829:9;6820:7;6816:23;6812:32;6809:52;;;6857:1;6854;6847:12;6809:52;6880:29;6899:9;6880:29;:::i;:::-;6870:39;;6960:2;6949:9;6945:18;6932:32;6987:18;6979:6;6976:30;6973:50;;;7019:1;7016;7009:12;6973:50;7042;7084:7;7075:6;7064:9;7060:22;7042:50;:::i;:::-;7032:60;;;6702:396;;;;;:::o;7103:260::-;7282:2;7271:9;7264:21;7245:4;7302:55;7353:2;7342:9;7338:18;7330:6;7302:55;:::i;7368:380::-;7447:1;7443:12;;;;7490;;;7511:61;;7565:4;7557:6;7553:17;7543:27;;7511:61;7618:2;7610:6;7607:14;7587:18;7584:38;7581:161;;7664:10;7659:3;7655:20;7652:1;7645:31;7699:4;7696:1;7689:15;7727:4;7724:1;7717:15;7879:1099;8007:3;8036:1;8069:6;8063:13;8099:3;8121:1;8149:9;8145:2;8141:18;8131:28;;8209:2;8198:9;8194:18;8231;8221:61;;8275:4;8267:6;8263:17;8253:27;;8221:61;8301:2;8349;8341:6;8338:14;8318:18;8315:38;8312:165;;-1:-1:-1;;;8376:33:1;;8432:4;8429:1;8422:15;8462:4;8383:3;8450:17;8312:165;8493:18;8520:104;;;;8638:1;8633:320;;;;8486:467;;8520:104;-1:-1:-1;;8553:24:1;;8541:37;;8598:16;;;;-1:-1:-1;8520:104:1;;8633:320;7826:1;7819:14;;;7863:4;7850:18;;8728:1;8742:165;8756:6;8753:1;8750:13;8742:165;;;8834:14;;8821:11;;;8814:35;8877:16;;;;8771:10;;8742:165;;;8746:3;;8936:6;8931:3;8927:16;8920:23;;8486:467;-1:-1:-1;8969:3:1;;7879:1099;-1:-1:-1;;;;;;;;7879:1099:1:o;8983:127::-;9044:10;9039:3;9035:20;9032:1;9025:31;9075:4;9072:1;9065:15;9099:4;9096:1;9089:15;9115:127;9176:10;9171:3;9167:20;9164:1;9157:31;9207:4;9204:1;9197:15;9231:4;9228:1;9221:15;9247:135;9286:3;9307:17;;;9304:43;;9327:18;;:::i;:::-;-1:-1:-1;9374:1:1;9363:13;;9247:135::o;9387:276::-;9518:3;9556:6;9550:13;9572:53;9618:6;9613:3;9606:4;9598:6;9594:17;9572:53;:::i;:::-;9641:16;;;;;9387:276;-1:-1:-1;;9387:276:1:o;9668:128::-;9708:3;9739:1;9735:6;9732:1;9729:13;9726:39;;;9745:18;;:::i;:::-;-1:-1:-1;9781:9:1;;9668:128::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    58,
    3365
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x62C49251 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xABF715FA GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xABF715FA EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xC19D93FB EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xD9E95A98 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0xEF002423 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xF276669D EQ PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x62C49251 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x72753BE5 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x80843E25 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x8949E009 EQ PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x27D9F76C GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x27D9F76C EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x2D35A8A2 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x46702B16 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A0D535 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x6A49FCE EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xD15FD77 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x12C06342 EQ PUSH2 0x182 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x139 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15E PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0xF4F JUMP JUMPDEST PUSH2 0x174 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14D JUMP JUMPDEST PUSH2 0x195 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFEF JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP3 SWAP2 SWAP1 PUSH2 0x102B JUMP JUMPDEST PUSH2 0x174 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x10FA JUMP JUMPDEST PUSH2 0x66D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x112F JUMP JUMPDEST PUSH2 0x174 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20E PUSH2 0x209 CALLDATASIZE PUSH1 0x4 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x7BE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x223 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x8E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x223 PUSH2 0x97B JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x139 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x25E CALLDATASIZE PUSH1 0x4 PUSH2 0x10FA JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x6 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x288 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x20E PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x123A JUMP JUMPDEST PUSH2 0x988 JUMP JUMPDEST PUSH2 0x20E PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x10FA JUMP JUMPDEST PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0x2CE PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x10FA JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x1288 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FA JUMPI PUSH2 0x2FA PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x333 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x320 PUSH2 0xDBD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x318 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH1 0x5 SWAP2 PUSH2 0x360 SWAP2 PUSH2 0x12CF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x38C SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3B8 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x405 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3DA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x405 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3E8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x43F SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x46B SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4B8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0x136A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP DUP1 DUP1 PUSH2 0x4EA SWAP1 PUSH2 0x1396 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x339 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND SWAP3 SWAP2 PUSH2 0x51E SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x54A SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x597 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x56C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x597 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x57A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x2 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0xFF PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV AND DUP5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH2 0x5EA SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x616 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x663 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x638 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x663 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x646 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP3 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x5 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE DUP1 SLOAD DUP2 SWAP1 PUSH2 0x693 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6BF SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x70C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6E1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x70C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6EF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD DUP1 SLOAD SWAP5 SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP5 SWAP2 SWAP4 POP SWAP1 PUSH2 0x73B SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x767 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7B4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x789 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7B4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x797 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xA SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7D8 JUMPI PUSH2 0x7D8 PUSH2 0x11FC JUMP JUMPDEST EQ PUSH2 0x7E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x806 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 MLOAD PUSH2 0x841 SWAP3 DUP7 ADD SWAP1 PUSH2 0xDEE JUMP JUMPDEST POP DUP1 PUSH1 0x5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x853 SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x87D SWAP3 SWAP2 SWAP1 PUSH2 0xDEE JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP1 MLOAD PUSH2 0x8C6 SWAP3 PUSH1 0x3 DUP6 ADD SWAP3 ADD SWAP1 PUSH2 0xDEE JUMP JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH2 0x8D7 SWAP2 POP PUSH1 0x1 PUSH2 0x13CB JUMP JUMPDEST PUSH1 0x7 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x8FA SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x926 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x973 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x948 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x973 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x956 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0x8FA SWAP1 PUSH2 0x129B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xA SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI PUSH2 0x9A2 PUSH2 0x11FC JUMP JUMPDEST EQ PUSH2 0x9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP9 DUP2 MSTORE SWAP2 DUP5 MSTORE DUP4 DUP2 MSTORE SWAP5 SWAP1 SWAP3 KECCAK256 DUP4 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP2 MLOAD DUP1 MLOAD SWAP4 SWAP5 DUP6 SWAP5 PUSH2 0xA28 SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xDEE JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP5 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x8 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP2 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SLOAD PUSH2 0xA99 SWAP1 PUSH1 0x1 PUSH2 0x13CB JUMP JUMPDEST PUSH1 0x8 SSTORE POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xAF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD081C9959DA5CDD195C9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP1 SUB PUSH2 0xC3D JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE CALLER DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x1 DUP1 DUP4 MSTORE SWAP5 SWAP1 SWAP3 KECCAK256 DUP4 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP2 SSTORE SWAP2 MLOAD DUP1 MLOAD SWAP4 SWAP5 DUP6 SWAP5 PUSH2 0xB73 SWAP4 SWAP2 DUP6 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xDEE JUMP JUMPDEST POP SWAP1 POP POP PUSH1 0x5 DUP3 PUSH1 0x40 MLOAD PUSH2 0xB87 SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH2 0xBA5 SWAP2 SWAP1 PUSH2 0x13CB JUMP JUMPDEST PUSH1 0x5 DUP4 PUSH1 0x40 MLOAD PUSH2 0xBB5 SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x6 DUP3 PUSH1 0x40 MLOAD PUSH2 0xBDA SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH2 0xBF5 SWAP2 SWAP1 PUSH2 0x13CB JUMP JUMPDEST PUSH1 0x6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xC05 SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 SWAP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 MSTORE KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC48 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x5 DUP3 PUSH1 0x40 MLOAD PUSH2 0xC58 SWAP2 SWAP1 PUSH2 0x13AF JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xC81 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCAD SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCFA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCCF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCFA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCDD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xD34 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD60 SWAP1 PUSH2 0x129B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDAD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD82 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDAD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD90 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xDFA SWAP1 PUSH2 0x129B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xE1C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xE62 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xE35 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xE62 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xE62 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xE62 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xE47 JUMP JUMPDEST POP PUSH2 0xE6E SWAP3 SWAP2 POP PUSH2 0xE72 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xE6E JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xE73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEBB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xEA3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xECA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xEE8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x80 DUP5 MSTORE PUSH2 0xF11 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xED0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0xF46 DUP3 DUP3 PUSH2 0xED0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFA4 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0xF92 DUP6 DUP4 MLOAD PUSH2 0xEFC JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xF76 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFE8 DUP3 PUSH2 0xFB1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x100A PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x104F SWAP1 DUP4 ADD DUP5 PUSH2 0xED0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x107E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1099 JUMPI PUSH2 0x1099 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x10C1 JUMPI PUSH2 0x10C1 PUSH2 0x1057 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x110C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x104F DUP5 DUP3 DUP6 ADD PUSH2 0x106D JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1142 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x116A DUP2 DUP6 PUSH2 0xED0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x118A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1193 DUP5 PUSH2 0xFB1 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11BC DUP8 DUP4 DUP9 ADD PUSH2 0x106D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x11D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11DF DUP7 DUP3 DUP8 ADD PUSH2 0x106D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xED0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x1234 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x124D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1256 DUP4 PUSH2 0xFB1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127E DUP6 DUP3 DUP7 ADD PUSH2 0x106D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12AF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4F2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x12EB JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 SUB PUSH2 0x130A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x131E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x132F JUMPI PUSH2 0x135C JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x135C JUMP JUMPDEST PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1354 JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x133B JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP SWAP5 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x13A8 JUMPI PUSH2 0x13A8 PUSH2 0x1380 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x13C1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xEA0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x13DE JUMPI PUSH2 0x13DE PUSH2 0x1380 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0xCB DUP7 PUSH9 0x5834DA05E783C795E3 DUP1 0xB1 0x4D 0x4C POP DUP3 DUP12 PUSH14 0x7810E2188C0EF8F16AEBAB64736F PUSH13 0x634300080D0033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10B"
    },
    "25": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x62C49251"
    },
    "38": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "GT",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA2"
    },
    "42": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xABF715FA"
    },
    "49": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "GT",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xABF715FA"
    },
    "60": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x250"
    },
    "64": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC19D93FB"
    },
    "71": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x27B"
    },
    "75": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD9E95A98"
    },
    "82": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x295"
    },
    "86": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xEF002423"
    },
    "93": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "94": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A8"
    },
    "97": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "98": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF276669D"
    },
    "104": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BB"
    },
    "108": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "109": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "REVERT",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "114": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x62C49251"
    },
    "120": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FB"
    },
    "124": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x72753BE5"
    },
    "131": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x210"
    },
    "135": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x80843E25"
    },
    "142": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "143": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x230"
    },
    "146": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "147": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8949E009"
    },
    "153": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "154": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x238"
    },
    "157": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "158": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "160": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "161": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "REVERT",
      "path": "0"
    },
    "162": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "163": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "164": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x27D9F76C"
    },
    "169": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "GT",
      "path": "0"
    },
    "170": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDE"
    },
    "173": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "174": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "175": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x27D9F76C"
    },
    "180": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "181": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A5"
    },
    "184": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "185": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "186": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2D35A8A2"
    },
    "191": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "192": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C6"
    },
    "195": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "196": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "197": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x46702B16"
    },
    "202": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "203": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CF"
    },
    "206": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "207": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "208": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x5F5300FF"
    },
    "213": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "214": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F2"
    },
    "217": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "218": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "220": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "221": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "REVERT",
      "path": "0"
    },
    "222": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "223": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "224": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3A0D535"
    },
    "229": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "230": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x110"
    },
    "233": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "234": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "235": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6A49FCE"
    },
    "240": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "241": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x156"
    },
    "244": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "245": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "246": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD15FD77"
    },
    "251": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "252": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B"
    },
    "255": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "256": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "257": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x12C06342"
    },
    "262": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "EQ",
      "path": "0"
    },
    "263": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x182"
    },
    "266": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "267": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "268": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "270": {
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "271": {
      "first_revert": true,
      "fn": null,
      "offset": [
        58,
        3365
      ],
      "op": "REVERT",
      "path": "0"
    },
    "272": {
      "offset": [
        576,
        621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "273": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x139"
    },
    "276": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11E"
    },
    "279": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "280": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "282": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE87"
    },
    "285": {
      "fn": null,
      "jump": "i",
      "offset": [
        576,
        621
      ],
      "op": "JUMP",
      "path": "0"
    },
    "286": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "287": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "289": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "291": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "292": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "294": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "295": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "DUP2",
      "path": "0"
    },
    "296": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "297": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "299": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "300": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "301": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "304": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "306": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "308": {
      "op": "SHL"
    },
    "309": {
      "op": "SUB"
    },
    "310": {
      "offset": [
        576,
        621
      ],
      "op": "AND",
      "path": "0"
    },
    "311": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "DUP2",
      "path": "0"
    },
    "312": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "JUMP",
      "path": "0"
    },
    "313": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "314": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "316": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "317": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "319": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "321": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "323": {
      "op": "SHL"
    },
    "324": {
      "op": "SUB"
    },
    "325": {
      "op": "SWAP1"
    },
    "326": {
      "op": "SWAP2"
    },
    "327": {
      "op": "AND"
    },
    "328": {
      "op": "DUP2"
    },
    "329": {
      "op": "MSTORE"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "332": {
      "op": "ADD"
    },
    "333": {
      "offset": [
        576,
        621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "334": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "336": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "337": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "DUP1",
      "path": "0"
    },
    "338": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "339": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SUB",
      "path": "0"
    },
    "340": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "341": {
      "fn": null,
      "offset": [
        576,
        621
      ],
      "op": "RETURN",
      "path": "0"
    },
    "342": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "343": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15E"
    },
    "346": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DB"
    },
    "349": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMP",
      "path": "0"
    },
    "350": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "351": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "353": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "354": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "357": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "358": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "359": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF4F"
    },
    "362": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMP",
      "path": "0"
    },
    "363": {
      "offset": [
        868,
        893
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "364": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174"
    },
    "367": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x9"
    },
    "369": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "370": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "DUP2",
      "path": "0"
    },
    "371": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "JUMP",
      "path": "0"
    },
    "372": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "373": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "375": {
      "fn": "Voting.getCandidates",
      "offset": [
        868,
        893
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "376": {
      "op": "SWAP1"
    },
    "377": {
      "op": "DUP2"
    },
    "378": {
      "op": "MSTORE"
    },
    "379": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "381": {
      "op": "ADD"
    },
    "382": {
      "offset": [
        868,
        893
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "385": {
      "op": "JUMP"
    },
    "386": {
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "387": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195"
    },
    "390": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x190"
    },
    "393": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "394": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "396": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "399": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "400": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "401": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4F8"
    },
    "404": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "405": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "406": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "408": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "409": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "412": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "413": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "414": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "415": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "416": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "417": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFEF"
    },
    "420": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "421": {
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "422": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B8"
    },
    "425": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B3"
    },
    "428": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "429": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "431": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "434": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "435": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "436": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5BD"
    },
    "439": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "440": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "441": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "443": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "444": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "447": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "448": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "449": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "450": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x102B"
    },
    "453": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "454": {
      "offset": [
        798,
        828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "455": {
      "fn": "Voting.getCandidates",
      "offset": [
        798,
        828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174"
    },
    "458": {
      "fn": "Voting.getCandidates",
      "offset": [
        798,
        828
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "460": {
      "fn": "Voting.getCandidates",
      "offset": [
        798,
        828
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "461": {
      "fn": "Voting.getCandidates",
      "offset": [
        798,
        828
      ],
      "op": "DUP2",
      "path": "0"
    },
    "462": {
      "fn": "Voting.getCandidates",
      "offset": [
        798,
        828
      ],
      "op": "JUMP",
      "path": "0"
    },
    "463": {
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "464": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E2"
    },
    "467": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DD"
    },
    "470": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "471": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "473": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FA"
    },
    "476": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "477": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "478": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66D"
    },
    "481": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "482": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "483": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "485": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "486": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "489": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "490": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "491": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "492": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "493": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "494": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x112F"
    },
    "497": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "498": {
      "offset": [
        836,
        862
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "499": {
      "fn": "Voting.getCandidates",
      "offset": [
        836,
        862
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174"
    },
    "502": {
      "fn": "Voting.getCandidates",
      "offset": [
        836,
        862
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "504": {
      "fn": "Voting.getCandidates",
      "offset": [
        836,
        862
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "505": {
      "fn": "Voting.getCandidates",
      "offset": [
        836,
        862
      ],
      "op": "DUP2",
      "path": "0"
    },
    "506": {
      "fn": "Voting.getCandidates",
      "offset": [
        836,
        862
      ],
      "op": "JUMP",
      "path": "0"
    },
    "507": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "508": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "511": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x209"
    },
    "514": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "515": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "517": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1175"
    },
    "520": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "521": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "522": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7BE"
    },
    "525": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "526": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "527": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "STOP",
      "path": "0"
    },
    "528": {
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "529": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x223"
    },
    "532": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x21E"
    },
    "535": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "536": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "538": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE87"
    },
    "541": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "542": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "543": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8E1"
    },
    "546": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "547": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "548": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "550": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "551": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "554": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "555": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "556": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11E9"
    },
    "559": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "560": {
      "offset": [
        1010,
        1037
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "561": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x223"
    },
    "564": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x97B"
    },
    "567": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1010,
        1037
      ],
      "op": "JUMP",
      "path": "0"
    },
    "568": {
      "offset": [
        967,
        998
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "569": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "571": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "572": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x139"
    },
    "575": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "576": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "579": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "580": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "DIV",
      "path": "0"
    },
    "581": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "583": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "585": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "587": {
      "op": "SHL"
    },
    "588": {
      "op": "SUB"
    },
    "589": {
      "offset": [
        967,
        998
      ],
      "op": "AND",
      "path": "0"
    },
    "590": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "DUP2",
      "path": "0"
    },
    "591": {
      "fn": "Voting.addCandidates",
      "offset": [
        967,
        998
      ],
      "op": "JUMP",
      "path": "0"
    },
    "592": {
      "offset": [
        742,
        790
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "593": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174"
    },
    "596": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x25E"
    },
    "599": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "600": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "602": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FA"
    },
    "605": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        742,
        790
      ],
      "op": "JUMP",
      "path": "0"
    },
    "606": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "607": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "608": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "609": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "611": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "612": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "613": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "ADD",
      "path": "0"
    },
    "614": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "615": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "ADD",
      "path": "0"
    },
    "616": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "617": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "618": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "620": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "621": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "622": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "623": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "624": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "ADD",
      "path": "0"
    },
    "625": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "626": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "627": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "628": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "ADD",
      "path": "0"
    },
    "629": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "630": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "631": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "632": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "633": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "634": {
      "fn": "Voting.addCandidates",
      "offset": [
        742,
        790
      ],
      "op": "JUMP",
      "path": "0"
    },
    "635": {
      "offset": [
        942,
        960
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "636": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "638": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "639": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x288"
    },
    "642": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "643": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "645": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "AND",
      "path": "0"
    },
    "646": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "DUP2",
      "path": "0"
    },
    "647": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "JUMP",
      "path": "0"
    },
    "648": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "649": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "651": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "652": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "655": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "656": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "657": {
      "fn": "Voting.addCandidates",
      "offset": [
        942,
        960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1212"
    },
    "660": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        942,
        960
      ],
      "op": "JUMP",
      "path": "0"
    },
    "661": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "662": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "665": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A3"
    },
    "668": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "669": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "671": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123A"
    },
    "674": {
      "fn": "Voting.addVoter",
      "jump": "i",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "675": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "676": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x988"
    },
    "679": {
      "fn": "Voting.addVoter",
      "jump": "i",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "680": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "681": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "684": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "687": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "688": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "690": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FA"
    },
    "693": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMP",
      "path": "0"
    },
    "694": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "695": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAA2"
    },
    "698": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMP",
      "path": "0"
    },
    "699": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "700": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CE"
    },
    "703": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C9"
    },
    "706": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "707": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "709": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FA"
    },
    "712": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "713": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "714": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC40"
    },
    "717": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "718": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "719": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "721": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "722": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14D"
    },
    "725": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "726": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "727": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1288"
    },
    "730": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "731": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "732": {
      "fn": "Voting.getCandidates",
      "offset": [
        1739,
        1757
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "734": {
      "fn": "Voting.getCandidates",
      "offset": [
        1766,
        1791
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "736": {
      "fn": "Voting.getCandidates",
      "offset": [
        1810,
        1825
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "738": {
      "fn": "Voting.getCandidates",
      "offset": [
        1810,
        1825
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "739": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "748": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP2",
      "path": "0"
    },
    "749": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "GT",
      "path": "0"
    },
    "750": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "751": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FA"
    },
    "754": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "755": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FA"
    },
    "758": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1057"
    },
    "761": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMP",
      "path": "0"
    },
    "762": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "763": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "765": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "766": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "767": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP1",
      "path": "0"
    },
    "768": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP3",
      "path": "0"
    },
    "769": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "770": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP1",
      "path": "0"
    },
    "771": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "773": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "MUL",
      "path": "0"
    },
    "774": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "776": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ADD",
      "path": "0"
    },
    "777": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP3",
      "path": "0"
    },
    "778": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ADD",
      "path": "0"
    },
    "779": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "781": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "782": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP1",
      "path": "0"
    },
    "783": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "784": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x333"
    },
    "787": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "788": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP2",
      "path": "0"
    },
    "789": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "791": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ADD",
      "path": "0"
    },
    "792": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "793": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x320"
    },
    "796": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDBD"
    },
    "799": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMP",
      "path": "0"
    },
    "800": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "801": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP2",
      "path": "0"
    },
    "802": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "803": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "805": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "ADD",
      "path": "0"
    },
    "806": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "807": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "809": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "810": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SUB",
      "path": "0"
    },
    "811": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "812": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "DUP2",
      "path": "0"
    },
    "813": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x318"
    },
    "816": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "817": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "818": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "POP",
      "path": "0"
    },
    "819": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "820": {
      "fn": "Voting.getCandidates",
      "offset": [
        1794,
        1826
      ],
      "op": "POP",
      "path": "0"
    },
    "821": {
      "fn": "Voting.getCandidates",
      "offset": [
        1766,
        1826
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "822": {
      "fn": "Voting.getCandidates",
      "offset": [
        1766,
        1826
      ],
      "op": "POP",
      "path": "0"
    },
    "823": {
      "fn": "Voting.getCandidates",
      "offset": [
        1839,
        1845
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "825": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "826": {
      "fn": "Voting.getCandidates",
      "offset": [
        1855,
        1870
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "828": {
      "fn": "Voting.getCandidates",
      "offset": [
        1855,
        1870
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "829": {
      "fn": "Voting.getCandidates",
      "offset": [
        1851,
        1852
      ],
      "op": "DUP2",
      "path": "0"
    },
    "830": {
      "fn": "Voting.getCandidates",
      "offset": [
        1851,
        1870
      ],
      "op": "LT",
      "path": "0"
    },
    "831": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "832": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4F2"
    },
    "835": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "836": {
      "fn": "Voting.getCandidates",
      "offset": [
        1889,
        1916
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "838": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "DUP2",
      "path": "0"
    },
    "839": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "DUP2",
      "path": "0"
    },
    "840": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "841": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1950
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "843": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "845": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "846": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "848": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "DUP1",
      "path": "0"
    },
    "849": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "DUP3",
      "path": "0"
    },
    "850": {
      "fn": "Voting.getCandidates",
      "offset": [
        1937,
        1953
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "851": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "852": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "853": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1936
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "855": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1936
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "856": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x360"
    },
    "859": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "860": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12CF"
    },
    "863": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1919,
        1954
      ],
      "op": "JUMP",
      "path": "0"
    },
    "864": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "865": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "866": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "DUP2",
      "path": "0"
    },
    "867": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "868": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "870": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "ADD",
      "path": "0"
    },
    "871": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "873": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "874": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "DUP1",
      "path": "0"
    },
    "875": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "876": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SUB",
      "path": "0"
    },
    "877": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "878": {
      "fn": "Voting.getCandidates",
      "offset": [
        1919,
        1954
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "879": {
      "fn": "Voting.getCandidates",
      "offset": [
        1889,
        1954
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "880": {
      "fn": "Voting.getCandidates",
      "offset": [
        1889,
        1954
      ],
      "op": "POP",
      "path": "0"
    },
    "881": {
      "fn": "Voting.getCandidates",
      "offset": [
        1978,
        1987
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 0
    },
    "882": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "884": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "885": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "886": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "888": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "889": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "891": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "892": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "893": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "894": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "896": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "897": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "898": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "899": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "900": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38C"
    },
    "903": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "904": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "907": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "908": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "909": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "910": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "912": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "913": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "915": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "916": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "917": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DIV",
      "path": "0"
    },
    "918": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MUL",
      "path": "0"
    },
    "919": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "921": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "922": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "924": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "925": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "926": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "927": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "928": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "930": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "931": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "932": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "933": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "934": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "935": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "936": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "937": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "938": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "940": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "941": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "942": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "943": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "944": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B8"
    },
    "947": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "948": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "951": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "952": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "953": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "954": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "955": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "958": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "959": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "960": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "962": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "LT",
      "path": "0"
    },
    "963": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3DA"
    },
    "966": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "967": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "970": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "971": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "972": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "973": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DIV",
      "path": "0"
    },
    "974": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MUL",
      "path": "0"
    },
    "975": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "976": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "977": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "978": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "980": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "981": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "982": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "985": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "986": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "987": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "988": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "989": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "990": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "991": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "993": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "994": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "996": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "998": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "999": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1000": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1001": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1002": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1003": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1004": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1005": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1006": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1008": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1009": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1010": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1012": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1013": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1014": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1015": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "GT",
      "path": "0"
    },
    "1016": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "1019": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1020": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1021": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1022": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SUB",
      "path": "0"
    },
    "1023": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1025": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "AND",
      "path": "0"
    },
    "1026": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1027": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1028": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1029": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1030": {
      "op": "POP"
    },
    "1031": {
      "op": "POP"
    },
    "1032": {
      "op": "POP"
    },
    "1033": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1034": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1035": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1036": {
      "op": "POP"
    },
    "1037": {
      "op": "POP"
    },
    "1038": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1040": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1041": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1042": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1049": {
      "op": "SHL"
    },
    "1050": {
      "op": "SUB"
    },
    "1051": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "AND",
      "path": "0"
    },
    "1052": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1054": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1055": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1056": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1057": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1059": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1060": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1061": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1062": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1064": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1065": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1066": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1067": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1069": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1070": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1071": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1072": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1073": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1075": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1076": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1077": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1078": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1079": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x43F"
    },
    "1082": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1083": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1086": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1087": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1088": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1089": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1091": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1092": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1094": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1095": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1096": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DIV",
      "path": "0"
    },
    "1097": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MUL",
      "path": "0"
    },
    "1098": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1100": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1101": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1103": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1104": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1105": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1106": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1107": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1109": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1110": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1111": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1112": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1113": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1114": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1115": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1116": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1117": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1119": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1120": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1121": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1122": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1123": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x46B"
    },
    "1126": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1127": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1130": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1131": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1132": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1133": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1134": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4B8"
    },
    "1137": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1138": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1139": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1141": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "LT",
      "path": "0"
    },
    "1142": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x48D"
    },
    "1145": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1146": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1149": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1150": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1151": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1152": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DIV",
      "path": "0"
    },
    "1153": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MUL",
      "path": "0"
    },
    "1154": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1155": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1156": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1157": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1159": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1160": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1161": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4B8"
    },
    "1164": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1165": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1166": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1167": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1168": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1169": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1170": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1172": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1173": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1175": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1177": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1178": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1179": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1180": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1181": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1182": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1183": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1184": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1185": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1187": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1188": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1189": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1191": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1192": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1193": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1194": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "GT",
      "path": "0"
    },
    "1195": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49B"
    },
    "1198": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1199": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1200": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1201": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SUB",
      "path": "0"
    },
    "1202": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1204": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "AND",
      "path": "0"
    },
    "1205": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1206": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "ADD",
      "path": "0"
    },
    "1207": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1208": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1209": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1210": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1211": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1212": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1213": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1214": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1215": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1216": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1217": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1218": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1972
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1219": {
      "fn": "Voting.getCandidates",
      "offset": [
        1973,
        1974
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1220": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1221": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1222": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1223": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "LT",
      "path": "0"
    },
    "1224": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D3"
    },
    "1227": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1228": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D3"
    },
    "1231": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x136A"
    },
    "1234": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1966,
        1975
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1235": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1236": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1238": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "MUL",
      "path": "0"
    },
    "1239": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1241": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "ADD",
      "path": "0"
    },
    "1242": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1975
      ],
      "op": "ADD",
      "path": "0"
    },
    "1243": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1244": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1245": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1246": {
      "fn": "Voting.getCandidates",
      "offset": [
        1966,
        1987
      ],
      "op": "POP",
      "path": "0"
    },
    "1247": {
      "fn": "Voting.getCandidates",
      "offset": [
        1877,
        1996
      ],
      "op": "POP",
      "path": "0"
    },
    "1248": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 1
    },
    "1249": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1250": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4EA"
    },
    "1253": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1254": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1396"
    },
    "1257": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        1872,
        1875
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1258": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1259": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1260": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "POP",
      "path": "0"
    },
    "1261": {
      "fn": "Voting.getCandidates",
      "offset": [
        1872,
        1875
      ],
      "op": "POP",
      "path": "0"
    },
    "1262": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x339"
    },
    "1265": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1266": {
      "fn": "Voting.getCandidates",
      "offset": [
        1834,
        1996
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1267": {
      "op": "POP"
    },
    "1268": {
      "fn": "Voting.getCandidates",
      "offset": [
        2010,
        2016
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 2
    },
    "1269": {
      "fn": "Voting.getCandidates",
      "offset": [
        1693,
        2024
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        1693,
        2024
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1272": {
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1273": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1275": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1277": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1278": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1279": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1280": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1281": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1282": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1283": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1285": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1286": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1287": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1288": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1289": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1291": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1292": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1293": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1294": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1295": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1297": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1298": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1299": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "AND",
      "path": "0"
    },
    "1300": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1301": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1302": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x51E"
    },
    "1305": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1306": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1309": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1310": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1311": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1312": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1314": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1315": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1317": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1318": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1319": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DIV",
      "path": "0"
    },
    "1320": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MUL",
      "path": "0"
    },
    "1321": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1323": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1324": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1326": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1327": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1328": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1329": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1330": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1332": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1333": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1334": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1335": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1336": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1337": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1338": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1339": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1340": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1342": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1343": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1344": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1345": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1346": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x54A"
    },
    "1349": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1350": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1353": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1354": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1355": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1356": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1357": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x597"
    },
    "1360": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1361": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1362": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1364": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "LT",
      "path": "0"
    },
    "1365": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x56C"
    },
    "1368": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1369": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1372": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1373": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1374": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1375": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DIV",
      "path": "0"
    },
    "1376": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MUL",
      "path": "0"
    },
    "1377": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1378": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1379": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1380": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1382": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1383": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1384": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x597"
    },
    "1387": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1388": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1389": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1390": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1391": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1392": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1393": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1395": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1396": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1398": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1400": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1401": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1402": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1403": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1404": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1405": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1406": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1407": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1408": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1410": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1411": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1412": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1414": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1415": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1416": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1417": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "GT",
      "path": "0"
    },
    "1418": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57A"
    },
    "1421": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1422": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1423": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1424": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SUB",
      "path": "0"
    },
    "1425": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1427": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "AND",
      "path": "0"
    },
    "1428": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1429": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1430": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1431": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1432": {
      "op": "POP"
    },
    "1433": {
      "op": "POP"
    },
    "1434": {
      "op": "POP"
    },
    "1435": {
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1437": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1438": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1439": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "ADD",
      "path": "0"
    },
    "1440": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1441": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1442": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1443": {
      "op": "POP"
    },
    "1444": {
      "op": "POP"
    },
    "1445": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1447": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1451": {
      "op": "SHL"
    },
    "1452": {
      "op": "SUB"
    },
    "1453": {
      "offset": [
        429,
        477
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1454": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "AND",
      "path": "0"
    },
    "1455": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1456": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1460": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1462": {
      "op": "SHL"
    },
    "1463": {
      "offset": [
        429,
        477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1464": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1465": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DIV",
      "path": "0"
    },
    "1466": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "AND",
      "path": "0"
    },
    "1467": {
      "fn": "Voting.getCandidates",
      "offset": [
        429,
        477
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1468": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        429,
        477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1469": {
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1470": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1472": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1474": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1475": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1476": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1477": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1479": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1480": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1481": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1482": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1484": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1485": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1486": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1487": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1488": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1489": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1490": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1491": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1492": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1493": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1498": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1500": {
      "op": "SHL"
    },
    "1501": {
      "op": "SUB"
    },
    "1502": {
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1503": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1504": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "AND",
      "path": "0"
    },
    "1505": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1506": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5EA"
    },
    "1509": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1510": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1513": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1514": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1515": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1516": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1518": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1519": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1521": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1522": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1523": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DIV",
      "path": "0"
    },
    "1524": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MUL",
      "path": "0"
    },
    "1525": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1527": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1528": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1530": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1531": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1532": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1533": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1534": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1536": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1537": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1538": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1539": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1540": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1541": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1542": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1543": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1544": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1546": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1547": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1548": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1549": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1550": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x616"
    },
    "1553": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1554": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1557": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1558": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1559": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1560": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1561": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x663"
    },
    "1564": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1565": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1566": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1568": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "LT",
      "path": "0"
    },
    "1569": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x638"
    },
    "1572": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1573": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1576": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1577": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1578": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1579": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DIV",
      "path": "0"
    },
    "1580": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MUL",
      "path": "0"
    },
    "1581": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1582": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1583": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1584": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1586": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1587": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1588": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x663"
    },
    "1591": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1592": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1593": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1594": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1595": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1596": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1597": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1599": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1600": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1602": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1604": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1605": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1606": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1607": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1608": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1609": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1610": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1611": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1612": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1614": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1615": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1616": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1618": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1619": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1620": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1621": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "GT",
      "path": "0"
    },
    "1622": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x646"
    },
    "1625": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1626": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1627": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1628": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SUB",
      "path": "0"
    },
    "1629": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1631": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "AND",
      "path": "0"
    },
    "1632": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1633": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "ADD",
      "path": "0"
    },
    "1634": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1635": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1636": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1637": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1638": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1639": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1640": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1641": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1642": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "POP",
      "path": "0"
    },
    "1643": {
      "fn": "Voting.getCandidates",
      "offset": [
        483,
        529
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1644": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        483,
        529
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1645": {
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1646": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1647": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1648": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1650": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1651": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1652": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1653": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1654": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1655": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1656": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1657": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "1659": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1660": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1661": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1662": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1663": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1664": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1665": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1666": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1667": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1668": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1669": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1670": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1671": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1672": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1673": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1674": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1675": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x693"
    },
    "1678": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1679": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1682": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1683": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1684": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1685": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1687": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1688": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1690": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1691": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1692": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DIV",
      "path": "0"
    },
    "1693": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MUL",
      "path": "0"
    },
    "1694": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1696": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1697": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1699": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1700": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1701": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1702": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1703": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1705": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1706": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1707": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1708": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1709": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1710": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1711": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1712": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1713": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1715": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1716": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1717": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1718": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1719": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6BF"
    },
    "1722": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1723": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1726": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1727": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1728": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1729": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1730": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70C"
    },
    "1733": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1734": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1735": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1737": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "LT",
      "path": "0"
    },
    "1738": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6E1"
    },
    "1741": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1742": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1745": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1746": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1747": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1748": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DIV",
      "path": "0"
    },
    "1749": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MUL",
      "path": "0"
    },
    "1750": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1751": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1752": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1753": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1755": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1756": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1757": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70C"
    },
    "1760": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1761": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1762": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1763": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1764": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1765": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1766": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1768": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1769": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1771": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1773": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1774": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1775": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1776": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1777": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1778": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1779": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1780": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1781": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1783": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1784": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1785": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1787": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1788": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1789": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1790": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "GT",
      "path": "0"
    },
    "1791": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6EF"
    },
    "1794": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1795": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1796": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1797": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SUB",
      "path": "0"
    },
    "1798": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1800": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "AND",
      "path": "0"
    },
    "1801": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1802": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1803": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1804": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1805": {
      "op": "POP"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "op": "POP"
    },
    "1808": {
      "op": "POP"
    },
    "1809": {
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1811": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1812": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1813": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1814": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1816": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1817": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1818": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1819": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1821": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1822": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1823": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1824": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1825": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1826": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "1827": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1829": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1831": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1833": {
      "op": "SHL"
    },
    "1834": {
      "op": "SUB"
    },
    "1835": {
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1836": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1837": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "AND",
      "path": "0"
    },
    "1838": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1839": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1840": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1841": {
      "op": "POP"
    },
    "1842": {
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1843": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x73B"
    },
    "1846": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1847": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1850": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1851": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1852": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1853": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1855": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1856": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1858": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1859": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1860": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DIV",
      "path": "0"
    },
    "1861": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MUL",
      "path": "0"
    },
    "1862": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1864": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1865": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1867": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1868": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1869": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1870": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1871": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1873": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1874": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1875": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1876": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1877": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1878": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1879": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1880": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1881": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1883": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1884": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1885": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1886": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1887": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x767"
    },
    "1890": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1891": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "1894": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1895": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1896": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1897": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1898": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B4"
    },
    "1901": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1902": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1903": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1905": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "LT",
      "path": "0"
    },
    "1906": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x789"
    },
    "1909": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1910": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1913": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1914": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1915": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1916": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DIV",
      "path": "0"
    },
    "1917": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MUL",
      "path": "0"
    },
    "1918": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1919": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1920": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1921": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1923": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1924": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1925": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B4"
    },
    "1928": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1929": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1930": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1931": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1932": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1933": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1934": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1936": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1937": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1939": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1941": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1942": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1943": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1944": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1945": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1946": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1947": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1948": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1949": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1951": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1952": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1953": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1955": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1956": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1957": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1958": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "GT",
      "path": "0"
    },
    "1959": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x797"
    },
    "1962": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1963": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1964": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1965": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SUB",
      "path": "0"
    },
    "1966": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1968": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "AND",
      "path": "0"
    },
    "1969": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1970": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1971": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1972": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1973": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1974": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1975": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1976": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1977": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1978": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1979": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "POP",
      "path": "0"
    },
    "1980": {
      "fn": "Voting.getCandidates",
      "offset": [
        681,
        735
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1981": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        681,
        735
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1982": {
      "fn": "Voting.addCandidates",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1983": {
      "fn": "Voting.addCandidates",
      "offset": [
        1327,
        1340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1985": {
      "fn": "Voting.addCandidates",
      "offset": [
        1327,
        1340
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1986": {
      "offset": [
        3228,
        3233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "1988": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3233
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1989": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1991": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3233
      ],
      "op": "AND",
      "path": "0"
    },
    "1992": {
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1994": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1995": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "GT",
      "path": "0"
    },
    "1996": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1997": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D8"
    },
    "2000": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2001": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D8"
    },
    "2004": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11FC"
    },
    "2007": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2008": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2009": {
      "fn": "Voting.addCandidates",
      "offset": [
        3228,
        3243
      ],
      "op": "EQ",
      "path": "0"
    },
    "2010": {
      "offset": [
        3220,
        3244
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7E2"
    },
    "2013": {
      "offset": [
        3220,
        3244
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2014": {
      "fn": "Voting.addCandidates",
      "offset": [
        3220,
        3244
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2016": {
      "fn": "Voting.addCandidates",
      "offset": [
        3220,
        3244
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2017": {
      "fn": "Voting.addCandidates",
      "offset": [
        3220,
        3244
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2018": {
      "fn": "Voting.addCandidates",
      "offset": [
        3220,
        3244
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2019": {
      "offset": [
        3311,
        3327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "2021": {
      "fn": "Voting.addCandidates",
      "offset": [
        3311,
        3327
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2022": {
      "fn": "Voting.addCandidates",
      "offset": [
        3311,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2025": {
      "fn": "Voting.addCandidates",
      "offset": [
        3311,
        3327
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2026": {
      "fn": "Voting.addCandidates",
      "offset": [
        3311,
        3327
      ],
      "op": "DIV",
      "path": "0"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2033": {
      "op": "SHL"
    },
    "2034": {
      "op": "SUB"
    },
    "2035": {
      "offset": [
        3311,
        3327
      ],
      "op": "AND",
      "path": "0"
    },
    "2036": {
      "offset": [
        3331,
        3341
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2037": {
      "offset": [
        3311,
        3341
      ],
      "op": "EQ",
      "path": "0"
    },
    "2038": {
      "offset": [
        3302,
        3342
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7FE"
    },
    "2041": {
      "offset": [
        3302,
        3342
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2042": {
      "fn": "Voting.addCandidates",
      "offset": [
        3302,
        3342
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2044": {
      "fn": "Voting.addCandidates",
      "offset": [
        3302,
        3342
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2045": {
      "fn": "Voting.addCandidates",
      "offset": [
        3302,
        3342
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2046": {
      "fn": "Voting.addCandidates",
      "offset": [
        3302,
        3342
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2047": {
      "fn": "Voting.addCandidates",
      "offset": [
        1364,
        1390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x806"
    },
    "2050": {
      "fn": "Voting.addCandidates",
      "offset": [
        1364,
        1390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDBD"
    },
    "2053": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1364,
        1390
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2054": {
      "fn": "Voting.addCandidates",
      "offset": [
        1364,
        1390
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2055": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2059": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2061": {
      "op": "SHL"
    },
    "2062": {
      "op": "SUB"
    },
    "2063": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "DUP6",
      "path": "0",
      "statement": 3
    },
    "2064": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "AND",
      "path": "0"
    },
    "2065": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1426
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2067": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1426
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2068": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1426
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2069": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1426
      ],
      "op": "ADD",
      "path": "0"
    },
    "2070": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2071": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2072": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2073": {
      "fn": "Voting.addCandidates",
      "offset": [
        1400,
        1446
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2074": {
      "fn": "Voting.addCandidates",
      "offset": [
        1456,
        1496
      ],
      "op": "DUP5",
      "path": "0",
      "statement": 4
    },
    "2075": {
      "fn": "Voting.addCandidates",
      "offset": [
        1456,
        1496
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2076": {
      "fn": "Voting.addCandidates",
      "offset": [
        1456,
        1496
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2077": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1522
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x60"
    },
    "2079": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1522
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2080": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1522
      ],
      "op": "ADD",
      "path": "0"
    },
    "2081": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1532
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2082": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1532
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2083": {
      "fn": "Voting.addCandidates",
      "offset": [
        1506,
        1532
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2084": {
      "fn": "Voting.addCandidates",
      "offset": [
        1556,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 6,
      "value": "0x7"
    },
    "2086": {
      "fn": "Voting.addCandidates",
      "offset": [
        1556,
        1571
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2087": {
      "fn": "Voting.addCandidates",
      "offset": [
        1456,
        1479
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2089": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2090": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2091": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2092": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1555
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2094": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2095": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2096": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2098": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2099": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1572
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2100": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2101": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2102": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x841"
    },
    "2105": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2106": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2107": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "ADD",
      "path": "0"
    },
    "2108": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2109": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEE"
    },
    "2112": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1542,
        1582
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2113": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2114": {
      "fn": "Voting.addCandidates",
      "offset": [
        1542,
        1582
      ],
      "op": "POP",
      "path": "0"
    },
    "2115": {
      "fn": "Voting.addCandidates",
      "offset": [
        1622,
        1631
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 7
    },
    "2116": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1610
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "2118": {
      "fn": "Voting.addCandidates",
      "offset": [
        1611,
        1618
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2119": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2121": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2122": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x853"
    },
    "2125": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2126": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2127": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "2130": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1593,
        1619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2131": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2132": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2133": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2134": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2135": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2137": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2138": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2140": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2141": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2142": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2143": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SUB",
      "path": "0"
    },
    "2144": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2145": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1619
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2146": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2148": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2149": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2150": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2151": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2152": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2154": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2155": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2156": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2157": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2158": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2159": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2161": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2162": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2163": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87D"
    },
    "2166": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2167": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2168": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2169": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEE"
    },
    "2172": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1593,
        1631
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2173": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2174": {
      "op": "POP"
    },
    "2175": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2177": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2178": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2179": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2180": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2181": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2183": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2184": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2185": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2186": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2193": {
      "op": "SHL"
    },
    "2194": {
      "op": "SUB"
    },
    "2195": {
      "op": "NOT"
    },
    "2196": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "AND",
      "path": "0"
    },
    "2197": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2203": {
      "op": "SHL"
    },
    "2204": {
      "op": "SUB"
    },
    "2205": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2206": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2207": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "AND",
      "path": "0"
    },
    "2208": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2209": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2210": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2211": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "OR",
      "path": "0"
    },
    "2212": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2213": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2214": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2216": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2217": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2218": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2219": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2221": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2222": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2223": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2224": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2226": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2227": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2228": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2229": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2230": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2231": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8C6"
    },
    "2234": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2235": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2237": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2238": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2239": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2240": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "ADD",
      "path": "0"
    },
    "2241": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2242": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEE"
    },
    "2245": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1593,
        1631
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2246": {
      "fn": "Voting.addCandidates",
      "offset": [
        1593,
        1631
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2247": {
      "op": "POP"
    },
    "2248": {
      "op": "POP"
    },
    "2249": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1674
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 8,
      "value": "0x7"
    },
    "2251": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1674
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2252": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1678
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D7"
    },
    "2255": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1678
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2256": {
      "op": "POP"
    },
    "2257": {
      "fn": "Voting.addCandidates",
      "offset": [
        1677,
        1678
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2259": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1678
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13CB"
    },
    "2262": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1659,
        1678
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2263": {
      "fn": "Voting.addCandidates",
      "offset": [
        1659,
        1678
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2264": {
      "fn": "Voting.addCandidates",
      "offset": [
        1641,
        1656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "2266": {
      "fn": "Voting.addCandidates",
      "offset": [
        1641,
        1678
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2267": {
      "op": "POP"
    },
    "2268": {
      "op": "POP"
    },
    "2269": {
      "op": "POP"
    },
    "2270": {
      "op": "POP"
    },
    "2271": {
      "op": "POP"
    },
    "2272": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        1209,
        1686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2273": {
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2274": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2276": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2278": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2279": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2281": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2282": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2283": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2284": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2286": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2287": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2288": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2289": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2290": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8FA"
    },
    "2293": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2294": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "2297": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2298": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2299": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2300": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2302": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2303": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2305": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2306": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2307": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DIV",
      "path": "0"
    },
    "2308": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MUL",
      "path": "0"
    },
    "2309": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2311": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2312": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2314": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2315": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2316": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2317": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2318": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2320": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2321": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2322": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2323": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2324": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2325": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2326": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2327": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2328": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2330": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2331": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2332": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2333": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2334": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x926"
    },
    "2337": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2338": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "2341": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2342": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2343": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2344": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2345": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x973"
    },
    "2348": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2349": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2350": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2352": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "LT",
      "path": "0"
    },
    "2353": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x948"
    },
    "2356": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2357": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2360": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2361": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2362": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2363": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DIV",
      "path": "0"
    },
    "2364": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MUL",
      "path": "0"
    },
    "2365": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2366": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2367": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2368": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2370": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2371": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2372": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x973"
    },
    "2375": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2376": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2377": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2378": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2379": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2380": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2381": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2383": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2384": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2386": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2388": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2389": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2390": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2391": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2392": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2393": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2394": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2395": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2396": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2398": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2399": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2400": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2402": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2403": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2404": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2405": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "GT",
      "path": "0"
    },
    "2406": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x956"
    },
    "2409": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2410": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2411": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2412": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SUB",
      "path": "0"
    },
    "2413": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2415": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "AND",
      "path": "0"
    },
    "2416": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2417": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "ADD",
      "path": "0"
    },
    "2418": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2419": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2420": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "POP",
      "path": "0"
    },
    "2421": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "POP",
      "path": "0"
    },
    "2422": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "POP",
      "path": "0"
    },
    "2423": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "POP",
      "path": "0"
    },
    "2424": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "POP",
      "path": "0"
    },
    "2425": {
      "fn": "Voting.addCandidates",
      "offset": [
        627,
        675
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2426": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        627,
        675
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2427": {
      "offset": [
        1010,
        1037
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2428": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "2430": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2431": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2432": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8FA"
    },
    "2435": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2436": {
      "fn": "Voting.addCandidates",
      "offset": [
        1010,
        1037
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "2439": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1010,
        1037
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2440": {
      "fn": "Voting.addVoter",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2441": {
      "fn": "Voting.addVoter",
      "offset": [
        2251,
        2264
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2443": {
      "fn": "Voting.addVoter",
      "offset": [
        2251,
        2264
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2444": {
      "offset": [
        3228,
        3233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "2446": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3233
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2447": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2449": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3233
      ],
      "op": "AND",
      "path": "0"
    },
    "2450": {
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2452": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2453": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "GT",
      "path": "0"
    },
    "2454": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2455": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9A2"
    },
    "2458": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2459": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9A2"
    },
    "2462": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11FC"
    },
    "2465": {
      "fn": "Voting.addVoter",
      "jump": "i",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2466": {
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2467": {
      "branch": 23,
      "fn": "Voting.addVoter",
      "offset": [
        3228,
        3243
      ],
      "op": "EQ",
      "path": "0"
    },
    "2468": {
      "offset": [
        3220,
        3244
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9AC"
    },
    "2471": {
      "branch": 23,
      "offset": [
        3220,
        3244
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2472": {
      "fn": "Voting.addVoter",
      "offset": [
        3220,
        3244
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2474": {
      "fn": "Voting.addVoter",
      "offset": [
        3220,
        3244
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2475": {
      "fn": "Voting.addVoter",
      "offset": [
        3220,
        3244
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2476": {
      "fn": "Voting.addVoter",
      "offset": [
        3220,
        3244
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2477": {
      "offset": [
        3311,
        3327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "2479": {
      "fn": "Voting.addVoter",
      "offset": [
        3311,
        3327
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2480": {
      "fn": "Voting.addVoter",
      "offset": [
        3311,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2483": {
      "fn": "Voting.addVoter",
      "offset": [
        3311,
        3327
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2484": {
      "fn": "Voting.addVoter",
      "offset": [
        3311,
        3327
      ],
      "op": "DIV",
      "path": "0"
    },
    "2485": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2489": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2491": {
      "op": "SHL"
    },
    "2492": {
      "op": "SUB"
    },
    "2493": {
      "offset": [
        3311,
        3327
      ],
      "op": "AND",
      "path": "0"
    },
    "2494": {
      "offset": [
        3331,
        3341
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2495": {
      "offset": [
        3311,
        3341
      ],
      "op": "EQ",
      "path": "0"
    },
    "2496": {
      "offset": [
        3302,
        3342
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9C8"
    },
    "2499": {
      "offset": [
        3302,
        3342
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2500": {
      "fn": "Voting.addVoter",
      "offset": [
        3302,
        3342
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2502": {
      "fn": "Voting.addVoter",
      "offset": [
        3302,
        3342
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2503": {
      "fn": "Voting.addVoter",
      "offset": [
        3302,
        3342
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2504": {
      "fn": "Voting.addVoter",
      "offset": [
        3302,
        3342
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2505": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2507": {
      "op": "DUP1"
    },
    "2508": {
      "op": "MLOAD"
    },
    "2509": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2511": {
      "op": "DUP2"
    },
    "2512": {
      "op": "ADD"
    },
    "2513": {
      "op": "DUP3"
    },
    "2514": {
      "op": "MSTORE"
    },
    "2515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2517": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2519": {
      "op": "DUP3"
    },
    "2520": {
      "op": "ADD"
    },
    "2521": {
      "op": "DUP2"
    },
    "2522": {
      "op": "SWAP1"
    },
    "2523": {
      "op": "MSTORE"
    },
    "2524": {
      "fn": "Voting.addVoter",
      "offset": [
        2334,
        2338
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 9,
      "value": "0x1"
    },
    "2526": {
      "fn": "Voting.addVoter",
      "offset": [
        2317,
        2338
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2527": {
      "fn": "Voting.addVoter",
      "offset": [
        2317,
        2338
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2528": {
      "fn": "Voting.addVoter",
      "offset": [
        2317,
        2338
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2533": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2535": {
      "op": "SHL"
    },
    "2536": {
      "op": "SUB"
    },
    "2537": {
      "fn": "Voting.addVoter",
      "offset": [
        2348,
        2382
      ],
      "op": "DUP8",
      "path": "0",
      "statement": 10
    },
    "2538": {
      "fn": "Voting.addVoter",
      "offset": [
        2348,
        2382
      ],
      "op": "AND",
      "path": "0"
    },
    "2539": {
      "op": "DUP4"
    },
    "2540": {
      "op": "DUP6"
    },
    "2541": {
      "op": "ADD"
    },
    "2542": {
      "fn": "Voting.addVoter",
      "offset": [
        2348,
        2382
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2543": {
      "fn": "Voting.addVoter",
      "offset": [
        2348,
        2382
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2544": {
      "fn": "Voting.addVoter",
      "offset": [
        2348,
        2382
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2545": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2547": {
      "op": "DUP1"
    },
    "2548": {
      "op": "DUP6"
    },
    "2549": {
      "op": "ADD"
    },
    "2550": {
      "fn": "Voting.addVoter",
      "offset": [
        2392,
        2420
      ],
      "op": "DUP9",
      "path": "0",
      "statement": 11
    },
    "2551": {
      "fn": "Voting.addVoter",
      "offset": [
        2392,
        2420
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2552": {
      "fn": "Voting.addVoter",
      "offset": [
        2392,
        2420
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2553": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 12
    },
    "2554": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2555": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2556": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2557": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2558": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2559": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2560": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2561": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2562": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2489
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2563": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2564": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2565": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2566": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2567": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2569": {
      "op": "NOT"
    },
    "2570": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "AND",
      "path": "0"
    },
    "2571": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2572": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2573": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2574": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "OR",
      "path": "0"
    },
    "2575": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2576": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2577": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2578": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2579": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2580": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2581": {
      "op": "SWAP4"
    },
    "2582": {
      "op": "SWAP5"
    },
    "2583": {
      "op": "DUP6"
    },
    "2584": {
      "op": "SWAP5"
    },
    "2585": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA28"
    },
    "2588": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2589": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2590": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ADD",
      "path": "0"
    },
    "2591": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2592": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2593": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2594": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ADD",
      "path": "0"
    },
    "2595": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2596": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEE"
    },
    "2599": {
      "fn": "Voting.addVoter",
      "jump": "i",
      "offset": [
        2460,
        2497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2600": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2601": {
      "op": "POP"
    },
    "2602": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2604": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2605": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2606": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ADD",
      "path": "0"
    },
    "2607": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2608": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2610": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2611": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2612": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ADD",
      "path": "0"
    },
    "2613": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2614": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2615": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2617": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2618": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2619": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ADD",
      "path": "0"
    },
    "2620": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2621": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2622": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2627": {
      "op": "SHL"
    },
    "2628": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "MUL",
      "path": "0"
    },
    "2629": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "2635": {
      "op": "SHL"
    },
    "2636": {
      "op": "SUB"
    },
    "2637": {
      "op": "NOT"
    },
    "2638": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2639": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2640": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "AND",
      "path": "0"
    },
    "2641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2647": {
      "op": "SHL"
    },
    "2648": {
      "op": "SUB"
    },
    "2649": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2650": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2651": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "AND",
      "path": "0"
    },
    "2652": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "OR",
      "path": "0"
    },
    "2653": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2654": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2655": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2656": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "OR",
      "path": "0"
    },
    "2657": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2658": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2659": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2660": {
      "fn": "Voting.addVoter",
      "offset": [
        2517,
        2528
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 13,
      "value": "0x8"
    },
    "2662": {
      "fn": "Voting.addVoter",
      "offset": [
        2517,
        2528
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2663": {
      "fn": "Voting.addVoter",
      "offset": [
        2517,
        2528
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2664": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2666": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2667": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2668": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2669": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2516
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2671": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2673": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2674": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2675": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2676": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2677": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2529
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2678": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2679": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2680": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2681": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2682": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "AND",
      "path": "0"
    },
    "2683": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2685": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2687": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2689": {
      "op": "SHL"
    },
    "2690": {
      "op": "SUB"
    },
    "2691": {
      "op": "NOT"
    },
    "2692": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2693": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2694": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2695": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "AND",
      "path": "0"
    },
    "2696": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2697": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2698": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2699": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "OR",
      "path": "0"
    },
    "2700": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2701": {
      "fn": "Voting.addVoter",
      "offset": [
        2507,
        2545
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2702": {
      "fn": "Voting.addVoter",
      "offset": [
        2569,
        2580
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 14
    },
    "2703": {
      "fn": "Voting.addVoter",
      "offset": [
        2569,
        2584
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA99"
    },
    "2706": {
      "fn": "Voting.addVoter",
      "offset": [
        2569,
        2584
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2707": {
      "fn": "Voting.addVoter",
      "offset": [
        2460,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2709": {
      "fn": "Voting.addVoter",
      "offset": [
        2569,
        2584
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13CB"
    },
    "2712": {
      "fn": "Voting.addVoter",
      "jump": "i",
      "offset": [
        2569,
        2584
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2713": {
      "fn": "Voting.addVoter",
      "offset": [
        2569,
        2584
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2714": {
      "fn": "Voting.addVoter",
      "offset": [
        2555,
        2566
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "2716": {
      "fn": "Voting.addVoter",
      "offset": [
        2555,
        2584
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2717": {
      "op": "POP"
    },
    "2718": {
      "op": "POP"
    },
    "2719": {
      "op": "POP"
    },
    "2720": {
      "op": "POP"
    },
    "2721": {
      "fn": "Voting.addVoter",
      "jump": "o",
      "offset": [
        2169,
        2596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2722": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2723": {
      "fn": "Voting.makeVote",
      "offset": [
        2688,
        2698
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 15
    },
    "2724": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2687
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2726": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2727": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2728": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2729": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2731": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2732": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2733": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2734": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2736": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2737": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2699
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2738": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2708
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2739": {
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2741": {
      "branch": 24,
      "fn": "Voting.makeVote",
      "offset": [
        2673,
        2708
      ],
      "op": "AND",
      "path": "0"
    },
    "2742": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAF6"
    },
    "2745": {
      "branch": 24,
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2746": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2748": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2749": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2753": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2755": {
      "op": "SHL"
    },
    "2756": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2757": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2758": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2760": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2762": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2763": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "ADD",
      "path": "0"
    },
    "2764": {
      "op": "MSTORE"
    },
    "2765": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "2767": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2769": {
      "op": "DUP3"
    },
    "2770": {
      "op": "ADD"
    },
    "2771": {
      "op": "MSTORE"
    },
    "2772": {
      "op": "PUSH14",
      "value": "0x139BDD081C9959DA5CDD195C9959"
    },
    "2787": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "2789": {
      "op": "SHL"
    },
    "2790": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2792": {
      "op": "DUP3"
    },
    "2793": {
      "op": "ADD"
    },
    "2794": {
      "op": "MSTORE"
    },
    "2795": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2797": {
      "op": "ADD"
    },
    "2798": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2800": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2801": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2802": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2803": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "SUB",
      "path": "0"
    },
    "2804": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2805": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "2806": {
      "fn": "Voting.makeVote",
      "offset": [
        2665,
        2726
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2807": {
      "fn": "Voting.makeVote",
      "offset": [
        2754,
        2764
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2808": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2810": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2811": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2812": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2813": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2815": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2816": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2817": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2818": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2820": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2821": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2765
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2822": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2824": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "ADD",
      "path": "0"
    },
    "2825": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2828": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2830": {
      "op": "SHL"
    },
    "2831": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2832": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "DIV",
      "path": "0"
    },
    "2833": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2835": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2771
      ],
      "op": "AND",
      "path": "0"
    },
    "2836": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2780
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2837": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2780
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2838": {
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2780
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2839": {
      "branch": 25,
      "fn": "Voting.makeVote",
      "offset": [
        2739,
        2780
      ],
      "op": "SUB",
      "path": "0"
    },
    "2840": {
      "fn": "Voting.makeVote",
      "offset": [
        2736,
        3165
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3D"
    },
    "2843": {
      "branch": 25,
      "fn": "Voting.makeVote",
      "offset": [
        2736,
        3165
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2846": {
      "op": "DUP1"
    },
    "2847": {
      "op": "MLOAD"
    },
    "2848": {
      "op": "DUP1"
    },
    "2849": {
      "op": "DUP3"
    },
    "2850": {
      "op": "ADD"
    },
    "2851": {
      "op": "DUP3"
    },
    "2852": {
      "op": "MSTORE"
    },
    "2853": {
      "fn": "Voting.makeVote",
      "offset": [
        2837,
        2847
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 16
    },
    "2854": {
      "fn": "Voting.makeVote",
      "offset": [
        2817,
        2847
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2855": {
      "fn": "Voting.makeVote",
      "offset": [
        2817,
        2847
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2856": {
      "fn": "Voting.makeVote",
      "offset": [
        2817,
        2847
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2857": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2859": {
      "op": "DUP1"
    },
    "2860": {
      "op": "DUP4"
    },
    "2861": {
      "op": "ADD"
    },
    "2862": {
      "fn": "Voting.makeVote",
      "offset": [
        2857,
        2882
      ],
      "op": "DUP6",
      "path": "0",
      "statement": 17
    },
    "2863": {
      "fn": "Voting.makeVote",
      "offset": [
        2857,
        2882
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2864": {
      "fn": "Voting.makeVote",
      "offset": [
        2857,
        2882
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2865": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2867": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "SWAP3",
      "path": "0",
      "statement": 18
    },
    "2868": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2869": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2870": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2906
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2872": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2873": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2874": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2875": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2876": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2877": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2878": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2918
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2879": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2880": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2881": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2882": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2885": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2887": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2889": {
      "op": "SHL"
    },
    "2890": {
      "op": "SUB"
    },
    "2891": {
      "op": "NOT"
    },
    "2892": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "AND",
      "path": "0"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2895": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2897": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2899": {
      "op": "SHL"
    },
    "2900": {
      "op": "SUB"
    },
    "2901": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2902": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2903": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "AND",
      "path": "0"
    },
    "2904": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "OR",
      "path": "0"
    },
    "2905": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2906": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2907": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2908": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2909": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2910": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2911": {
      "op": "SWAP4"
    },
    "2912": {
      "op": "SWAP5"
    },
    "2913": {
      "op": "DUP6"
    },
    "2914": {
      "op": "SWAP5"
    },
    "2915": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB73"
    },
    "2918": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2919": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2920": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2921": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "ADD",
      "path": "0"
    },
    "2922": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2923": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2924": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2925": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "ADD",
      "path": "0"
    },
    "2926": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2927": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEE"
    },
    "2930": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2893,
        2925
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2931": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2932": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "POP",
      "path": "0"
    },
    "2933": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2934": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "POP",
      "path": "0"
    },
    "2935": {
      "fn": "Voting.makeVote",
      "offset": [
        2893,
        2925
      ],
      "op": "POP",
      "path": "0"
    },
    "2936": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3000
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 19,
      "value": "0x5"
    },
    "2938": {
      "fn": "Voting.makeVote",
      "offset": [
        3001,
        3012
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2939": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2941": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2942": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB87"
    },
    "2945": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2946": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2947": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "2950": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2983,
        3013
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2951": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2952": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2953": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2954": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2955": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2957": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "ADD",
      "path": "0"
    },
    "2958": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2960": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2961": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2962": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2963": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SUB",
      "path": "0"
    },
    "2964": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2965": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3013
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2966": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3027
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2968": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3027
      ],
      "op": "ADD",
      "path": "0"
    },
    "2969": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3027
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2970": {
      "fn": "Voting.makeVote",
      "offset": [
        3030,
        3031
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2972": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3031
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBA5"
    },
    "2975": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3031
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2976": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3031
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2977": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3031
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13CB"
    },
    "2980": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2983,
        3031
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2981": {
      "fn": "Voting.makeVote",
      "offset": [
        2983,
        3031
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2982": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2953
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "2984": {
      "fn": "Voting.makeVote",
      "offset": [
        2954,
        2965
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2985": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2987": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2988": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBB5"
    },
    "2991": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2992": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2993": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "2996": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        2936,
        2966
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2997": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2998": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2999": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3000": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3001": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3003": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "ADD",
      "path": "0"
    },
    "3004": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3006": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3007": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3008": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3009": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SUB",
      "path": "0"
    },
    "3010": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3011": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2966
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3012": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2980
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3014": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        2980
      ],
      "op": "ADD",
      "path": "0"
    },
    "3015": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        3031
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3016": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        3031
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3017": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        3031
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3018": {
      "fn": "Voting.makeVote",
      "offset": [
        2936,
        3031
      ],
      "op": "POP",
      "path": "0"
    },
    "3019": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3083
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 20,
      "value": "0x6"
    },
    "3021": {
      "fn": "Voting.makeVote",
      "offset": [
        3084,
        3095
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3022": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3024": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3025": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBDA"
    },
    "3028": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3029": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3030": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "3033": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        3070,
        3096
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3034": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3035": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3036": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3037": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3038": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3040": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "ADD",
      "path": "0"
    },
    "3041": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3043": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3044": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3045": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3046": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SUB",
      "path": "0"
    },
    "3047": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3048": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3049": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3096
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3050": {
      "fn": "Voting.makeVote",
      "offset": [
        3099,
        3100
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3052": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3100
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBF5"
    },
    "3055": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3100
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3056": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3100
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3057": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3100
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13CB"
    },
    "3060": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        3070,
        3100
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3061": {
      "fn": "Voting.makeVote",
      "offset": [
        3070,
        3100
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3062": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3054
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "3064": {
      "fn": "Voting.makeVote",
      "offset": [
        3055,
        3066
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3065": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3067": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3068": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC05"
    },
    "3071": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3072": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3073": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "3076": {
      "fn": "Voting.makeVote",
      "jump": "i",
      "offset": [
        3041,
        3067
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3077": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3078": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3079": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3080": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3081": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3083": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3084": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3085": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3086": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3087": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3088": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SUB",
      "path": "0"
    },
    "3089": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3091": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3092": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3093": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "ADD",
      "path": "0"
    },
    "3094": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3095": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3096": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3067
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3097": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3100
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3098": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3100
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3099": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3100
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3100": {
      "fn": "Voting.makeVote",
      "offset": [
        3041,
        3100
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3101": {
      "fn": "Voting.makeVote",
      "offset": [
        3130,
        3140
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 21
    },
    "3102": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3129
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3104": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3105": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3106": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3107": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3108": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3109": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3110": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3111": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3141
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3112": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3147
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3114": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3147
      ],
      "op": "ADD",
      "path": "0"
    },
    "3115": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3116": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3117": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3119": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3121": {
      "op": "SHL"
    },
    "3122": {
      "op": "NOT"
    },
    "3123": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "AND",
      "path": "0"
    },
    "3124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3126": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3128": {
      "op": "SHL"
    },
    "3129": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "OR",
      "path": "0"
    },
    "3130": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3131": {
      "fn": "Voting.makeVote",
      "offset": [
        3115,
        3154
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3132": {
      "op": "POP"
    },
    "3133": {
      "fn": "Voting.makeVote",
      "offset": [
        2736,
        3165
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3134": {
      "fn": "Voting.makeVote",
      "offset": [
        2603,
        3171
      ],
      "op": "POP",
      "path": "0"
    },
    "3135": {
      "fn": "Voting.makeVote",
      "jump": "o",
      "offset": [
        2603,
        3171
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3136": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3137": {
      "fn": "Voting.getCandidate",
      "offset": [
        2096,
        2112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC48"
    },
    "3140": {
      "fn": "Voting.getCandidate",
      "offset": [
        2096,
        2112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDBD"
    },
    "3143": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2096,
        2112
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3144": {
      "fn": "Voting.getCandidate",
      "offset": [
        2096,
        2112
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3145": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2147
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 22,
      "value": "0x5"
    },
    "3147": {
      "fn": "Voting.getCandidate",
      "offset": [
        2148,
        2155
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3148": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3150": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3151": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC58"
    },
    "3154": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3155": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3156": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13AF"
    },
    "3159": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2130,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3160": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3161": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3162": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3163": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3164": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3166": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3167": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3169": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3170": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3171": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3172": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SUB",
      "path": "0"
    },
    "3173": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3174": {
      "fn": "Voting.getCandidate",
      "offset": [
        2130,
        2156
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3175": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3177": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3178": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3179": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3181": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3182": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3184": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3185": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3186": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3187": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3189": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3190": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3191": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3192": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3193": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC81"
    },
    "3196": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3197": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "3200": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3201": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3202": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3203": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3205": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3206": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3208": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3209": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3210": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DIV",
      "path": "0"
    },
    "3211": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MUL",
      "path": "0"
    },
    "3212": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3214": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3215": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3217": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3218": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3219": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3220": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3221": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3223": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3224": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3225": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3226": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3227": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3228": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3229": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3230": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3231": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3233": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3234": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3235": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3236": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3237": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCAD"
    },
    "3240": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3241": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "3244": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3245": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3246": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3247": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3248": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCFA"
    },
    "3251": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3252": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3253": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3255": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "LT",
      "path": "0"
    },
    "3256": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCCF"
    },
    "3259": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3260": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3263": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3264": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3265": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3266": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DIV",
      "path": "0"
    },
    "3267": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MUL",
      "path": "0"
    },
    "3268": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3269": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3270": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3271": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3273": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3274": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3275": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCFA"
    },
    "3278": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3279": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3280": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3281": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3282": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3283": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3284": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3286": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3287": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3289": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3291": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3292": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3293": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3294": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3295": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3296": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3297": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3298": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3299": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3301": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3302": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3303": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3305": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3306": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3307": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3308": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "GT",
      "path": "0"
    },
    "3309": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCDD"
    },
    "3312": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3313": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3314": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3315": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SUB",
      "path": "0"
    },
    "3316": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3318": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "AND",
      "path": "0"
    },
    "3319": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3320": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3321": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3322": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3323": {
      "op": "POP"
    },
    "3324": {
      "op": "POP"
    },
    "3325": {
      "op": "POP"
    },
    "3326": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3327": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3328": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3329": {
      "op": "POP"
    },
    "3330": {
      "op": "POP"
    },
    "3331": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3333": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3334": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3335": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3340": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3342": {
      "op": "SHL"
    },
    "3343": {
      "op": "SUB"
    },
    "3344": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "AND",
      "path": "0"
    },
    "3345": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3347": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3348": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3349": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3350": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3352": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3353": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3354": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3355": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3357": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3358": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3359": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3360": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3362": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3363": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3364": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3365": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3366": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3368": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3369": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3370": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3371": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3372": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD34"
    },
    "3375": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3376": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "3379": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3380": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3381": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3382": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3384": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3385": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3387": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3388": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3389": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DIV",
      "path": "0"
    },
    "3390": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MUL",
      "path": "0"
    },
    "3391": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3393": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3394": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3396": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3397": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3398": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3399": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3400": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3402": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3403": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3404": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3405": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3406": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3407": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3408": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3409": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3410": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3412": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3413": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3414": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3415": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3416": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD60"
    },
    "3419": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3420": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129B"
    },
    "3423": {
      "fn": "Voting.getCandidate",
      "jump": "i",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3424": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3425": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3426": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3427": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDAD"
    },
    "3430": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3431": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3432": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3434": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "LT",
      "path": "0"
    },
    "3435": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD82"
    },
    "3438": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3439": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3442": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3443": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3444": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3445": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DIV",
      "path": "0"
    },
    "3446": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MUL",
      "path": "0"
    },
    "3447": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3448": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3449": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3450": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3452": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3453": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3454": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDAD"
    },
    "3457": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3458": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3459": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3460": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3461": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3462": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3463": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3465": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3466": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3468": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3470": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3471": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3472": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3473": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3474": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3475": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3476": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3477": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3478": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3480": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3481": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3482": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3484": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3485": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3486": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3487": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "GT",
      "path": "0"
    },
    "3488": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD90"
    },
    "3491": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3492": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3493": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3494": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SUB",
      "path": "0"
    },
    "3495": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3497": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "AND",
      "path": "0"
    },
    "3498": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3499": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "ADD",
      "path": "0"
    },
    "3500": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3501": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3502": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3503": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3504": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3505": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3506": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3507": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3508": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3509": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3510": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3511": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3512": {
      "fn": "Voting.getCandidate",
      "offset": [
        2123,
        2156
      ],
      "op": "POP",
      "path": "0"
    },
    "3513": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3514": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3515": {
      "fn": "Voting.getCandidate",
      "offset": [
        2031,
        2163
      ],
      "op": "POP",
      "path": "0"
    },
    "3516": {
      "fn": "Voting.getCandidate",
      "jump": "o",
      "offset": [
        2031,
        2163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3517": {
      "op": "JUMPDEST"
    },
    "3518": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3520": {
      "op": "MLOAD"
    },
    "3521": {
      "op": "DUP1"
    },
    "3522": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3524": {
      "op": "ADD"
    },
    "3525": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3527": {
      "op": "MSTORE"
    },
    "3528": {
      "op": "DUP1"
    },
    "3529": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3531": {
      "op": "DUP2"
    },
    "3532": {
      "op": "MSTORE"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3535": {
      "op": "ADD"
    },
    "3536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3538": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3540": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3542": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3544": {
      "op": "SHL"
    },
    "3545": {
      "op": "SUB"
    },
    "3546": {
      "op": "AND"
    },
    "3547": {
      "op": "DUP2"
    },
    "3548": {
      "op": "MSTORE"
    },
    "3549": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3551": {
      "op": "ADD"
    },
    "3552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3554": {
      "op": "DUP2"
    },
    "3555": {
      "op": "MSTORE"
    },
    "3556": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3558": {
      "op": "ADD"
    },
    "3559": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3561": {
      "op": "DUP2"
    },
    "3562": {
      "op": "MSTORE"
    },
    "3563": {
      "op": "POP"
    },
    "3564": {
      "op": "SWAP1"
    },
    "3565": {
      "jump": "o",
      "op": "JUMP"
    },
    "3566": {
      "op": "JUMPDEST"
    },
    "3567": {
      "op": "DUP3"
    },
    "3568": {
      "op": "DUP1"
    },
    "3569": {
      "op": "SLOAD"
    },
    "3570": {
      "op": "PUSH2",
      "value": "0xDFA"
    },
    "3573": {
      "op": "SWAP1"
    },
    "3574": {
      "op": "PUSH2",
      "value": "0x129B"
    },
    "3577": {
      "jump": "i",
      "op": "JUMP"
    },
    "3578": {
      "op": "JUMPDEST"
    },
    "3579": {
      "op": "SWAP1"
    },
    "3580": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3582": {
      "op": "MSTORE"
    },
    "3583": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3585": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3587": {
      "op": "KECCAK256"
    },
    "3588": {
      "op": "SWAP1"
    },
    "3589": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3591": {
      "op": "ADD"
    },
    "3592": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3594": {
      "op": "SWAP1"
    },
    "3595": {
      "op": "DIV"
    },
    "3596": {
      "op": "DUP2"
    },
    "3597": {
      "op": "ADD"
    },
    "3598": {
      "op": "SWAP3"
    },
    "3599": {
      "op": "DUP3"
    },
    "3600": {
      "op": "PUSH2",
      "value": "0xE1C"
    },
    "3603": {
      "op": "JUMPI"
    },
    "3604": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3606": {
      "op": "DUP6"
    },
    "3607": {
      "op": "SSTORE"
    },
    "3608": {
      "op": "PUSH2",
      "value": "0xE62"
    },
    "3611": {
      "op": "JUMP"
    },
    "3612": {
      "op": "JUMPDEST"
    },
    "3613": {
      "op": "DUP3"
    },
    "3614": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3616": {
      "op": "LT"
    },
    "3617": {
      "op": "PUSH2",
      "value": "0xE35"
    },
    "3620": {
      "op": "JUMPI"
    },
    "3621": {
      "op": "DUP1"
    },
    "3622": {
      "op": "MLOAD"
    },
    "3623": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3625": {
      "op": "NOT"
    },
    "3626": {
      "op": "AND"
    },
    "3627": {
      "op": "DUP4"
    },
    "3628": {
      "op": "DUP1"
    },
    "3629": {
      "op": "ADD"
    },
    "3630": {
      "op": "OR"
    },
    "3631": {
      "op": "DUP6"
    },
    "3632": {
      "op": "SSTORE"
    },
    "3633": {
      "op": "PUSH2",
      "value": "0xE62"
    },
    "3636": {
      "op": "JUMP"
    },
    "3637": {
      "op": "JUMPDEST"
    },
    "3638": {
      "op": "DUP3"
    },
    "3639": {
      "op": "DUP1"
    },
    "3640": {
      "op": "ADD"
    },
    "3641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3643": {
      "op": "ADD"
    },
    "3644": {
      "op": "DUP6"
    },
    "3645": {
      "op": "SSTORE"
    },
    "3646": {
      "op": "DUP3"
    },
    "3647": {
      "op": "ISZERO"
    },
    "3648": {
      "op": "PUSH2",
      "value": "0xE62"
    },
    "3651": {
      "op": "JUMPI"
    },
    "3652": {
      "op": "SWAP2"
    },
    "3653": {
      "op": "DUP3"
    },
    "3654": {
      "op": "ADD"
    },
    "3655": {
      "op": "JUMPDEST"
    },
    "3656": {
      "op": "DUP3"
    },
    "3657": {
      "op": "DUP2"
    },
    "3658": {
      "op": "GT"
    },
    "3659": {
      "op": "ISZERO"
    },
    "3660": {
      "op": "PUSH2",
      "value": "0xE62"
    },
    "3663": {
      "op": "JUMPI"
    },
    "3664": {
      "op": "DUP3"
    },
    "3665": {
      "op": "MLOAD"
    },
    "3666": {
      "op": "DUP3"
    },
    "3667": {
      "op": "SSTORE"
    },
    "3668": {
      "op": "SWAP2"
    },
    "3669": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3671": {
      "op": "ADD"
    },
    "3672": {
      "op": "SWAP2"
    },
    "3673": {
      "op": "SWAP1"
    },
    "3674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3676": {
      "op": "ADD"
    },
    "3677": {
      "op": "SWAP1"
    },
    "3678": {
      "op": "PUSH2",
      "value": "0xE47"
    },
    "3681": {
      "op": "JUMP"
    },
    "3682": {
      "op": "JUMPDEST"
    },
    "3683": {
      "op": "POP"
    },
    "3684": {
      "op": "PUSH2",
      "value": "0xE6E"
    },
    "3687": {
      "op": "SWAP3"
    },
    "3688": {
      "op": "SWAP2"
    },
    "3689": {
      "op": "POP"
    },
    "3690": {
      "op": "PUSH2",
      "value": "0xE72"
    },
    "3693": {
      "jump": "i",
      "op": "JUMP"
    },
    "3694": {
      "op": "JUMPDEST"
    },
    "3695": {
      "op": "POP"
    },
    "3696": {
      "op": "SWAP1"
    },
    "3697": {
      "jump": "o",
      "op": "JUMP"
    },
    "3698": {
      "op": "JUMPDEST"
    },
    "3699": {
      "op": "JUMPDEST"
    },
    "3700": {
      "op": "DUP1"
    },
    "3701": {
      "op": "DUP3"
    },
    "3702": {
      "op": "GT"
    },
    "3703": {
      "op": "ISZERO"
    },
    "3704": {
      "op": "PUSH2",
      "value": "0xE6E"
    },
    "3707": {
      "op": "JUMPI"
    },
    "3708": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3710": {
      "op": "DUP2"
    },
    "3711": {
      "op": "SSTORE"
    },
    "3712": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3714": {
      "op": "ADD"
    },
    "3715": {
      "op": "PUSH2",
      "value": "0xE73"
    },
    "3718": {
      "op": "JUMP"
    },
    "3719": {
      "op": "JUMPDEST"
    },
    "3720": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3724": {
      "op": "DUP3"
    },
    "3725": {
      "op": "DUP5"
    },
    "3726": {
      "op": "SUB"
    },
    "3727": {
      "op": "SLT"
    },
    "3728": {
      "op": "ISZERO"
    },
    "3729": {
      "op": "PUSH2",
      "value": "0xE99"
    },
    "3732": {
      "op": "JUMPI"
    },
    "3733": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3735": {
      "op": "DUP1"
    },
    "3736": {
      "op": "REVERT"
    },
    "3737": {
      "op": "JUMPDEST"
    },
    "3738": {
      "op": "POP"
    },
    "3739": {
      "op": "CALLDATALOAD"
    },
    "3740": {
      "op": "SWAP2"
    },
    "3741": {
      "op": "SWAP1"
    },
    "3742": {
      "op": "POP"
    },
    "3743": {
      "jump": "o",
      "op": "JUMP"
    },
    "3744": {
      "op": "JUMPDEST"
    },
    "3745": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3747": {
      "op": "JUMPDEST"
    },
    "3748": {
      "op": "DUP4"
    },
    "3749": {
      "op": "DUP2"
    },
    "3750": {
      "op": "LT"
    },
    "3751": {
      "op": "ISZERO"
    },
    "3752": {
      "op": "PUSH2",
      "value": "0xEBB"
    },
    "3755": {
      "op": "JUMPI"
    },
    "3756": {
      "op": "DUP2"
    },
    "3757": {
      "op": "DUP2"
    },
    "3758": {
      "op": "ADD"
    },
    "3759": {
      "op": "MLOAD"
    },
    "3760": {
      "op": "DUP4"
    },
    "3761": {
      "op": "DUP3"
    },
    "3762": {
      "op": "ADD"
    },
    "3763": {
      "op": "MSTORE"
    },
    "3764": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3766": {
      "op": "ADD"
    },
    "3767": {
      "op": "PUSH2",
      "value": "0xEA3"
    },
    "3770": {
      "op": "JUMP"
    },
    "3771": {
      "op": "JUMPDEST"
    },
    "3772": {
      "op": "DUP4"
    },
    "3773": {
      "op": "DUP2"
    },
    "3774": {
      "op": "GT"
    },
    "3775": {
      "op": "ISZERO"
    },
    "3776": {
      "op": "PUSH2",
      "value": "0xECA"
    },
    "3779": {
      "op": "JUMPI"
    },
    "3780": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3782": {
      "op": "DUP5"
    },
    "3783": {
      "op": "DUP5"
    },
    "3784": {
      "op": "ADD"
    },
    "3785": {
      "op": "MSTORE"
    },
    "3786": {
      "op": "JUMPDEST"
    },
    "3787": {
      "op": "POP"
    },
    "3788": {
      "op": "POP"
    },
    "3789": {
      "op": "POP"
    },
    "3790": {
      "op": "POP"
    },
    "3791": {
      "jump": "o",
      "op": "JUMP"
    },
    "3792": {
      "op": "JUMPDEST"
    },
    "3793": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3795": {
      "op": "DUP2"
    },
    "3796": {
      "op": "MLOAD"
    },
    "3797": {
      "op": "DUP1"
    },
    "3798": {
      "op": "DUP5"
    },
    "3799": {
      "op": "MSTORE"
    },
    "3800": {
      "op": "PUSH2",
      "value": "0xEE8"
    },
    "3803": {
      "op": "DUP2"
    },
    "3804": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3806": {
      "op": "DUP7"
    },
    "3807": {
      "op": "ADD"
    },
    "3808": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3810": {
      "op": "DUP7"
    },
    "3811": {
      "op": "ADD"
    },
    "3812": {
      "op": "PUSH2",
      "value": "0xEA0"
    },
    "3815": {
      "jump": "i",
      "op": "JUMP"
    },
    "3816": {
      "op": "JUMPDEST"
    },
    "3817": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3819": {
      "op": "ADD"
    },
    "3820": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3822": {
      "op": "NOT"
    },
    "3823": {
      "op": "AND"
    },
    "3824": {
      "op": "SWAP3"
    },
    "3825": {
      "op": "SWAP1"
    },
    "3826": {
      "op": "SWAP3"
    },
    "3827": {
      "op": "ADD"
    },
    "3828": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3830": {
      "op": "ADD"
    },
    "3831": {
      "op": "SWAP3"
    },
    "3832": {
      "op": "SWAP2"
    },
    "3833": {
      "op": "POP"
    },
    "3834": {
      "op": "POP"
    },
    "3835": {
      "jump": "o",
      "op": "JUMP"
    },
    "3836": {
      "op": "JUMPDEST"
    },
    "3837": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3839": {
      "op": "DUP2"
    },
    "3840": {
      "op": "MLOAD"
    },
    "3841": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3843": {
      "op": "DUP5"
    },
    "3844": {
      "op": "MSTORE"
    },
    "3845": {
      "op": "PUSH2",
      "value": "0xF11"
    },
    "3848": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3850": {
      "op": "DUP6"
    },
    "3851": {
      "op": "ADD"
    },
    "3852": {
      "op": "DUP3"
    },
    "3853": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "3856": {
      "jump": "i",
      "op": "JUMP"
    },
    "3857": {
      "op": "JUMPDEST"
    },
    "3858": {
      "op": "SWAP1"
    },
    "3859": {
      "op": "POP"
    },
    "3860": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3862": {
      "op": "DUP1"
    },
    "3863": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3865": {
      "op": "SHL"
    },
    "3866": {
      "op": "SUB"
    },
    "3867": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3869": {
      "op": "DUP5"
    },
    "3870": {
      "op": "ADD"
    },
    "3871": {
      "op": "MLOAD"
    },
    "3872": {
      "op": "AND"
    },
    "3873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3875": {
      "op": "DUP6"
    },
    "3876": {
      "op": "ADD"
    },
    "3877": {
      "op": "MSTORE"
    },
    "3878": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3880": {
      "op": "DUP4"
    },
    "3881": {
      "op": "ADD"
    },
    "3882": {
      "op": "MLOAD"
    },
    "3883": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3885": {
      "op": "DUP6"
    },
    "3886": {
      "op": "ADD"
    },
    "3887": {
      "op": "MSTORE"
    },
    "3888": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3890": {
      "op": "DUP4"
    },
    "3891": {
      "op": "ADD"
    },
    "3892": {
      "op": "MLOAD"
    },
    "3893": {
      "op": "DUP5"
    },
    "3894": {
      "op": "DUP3"
    },
    "3895": {
      "op": "SUB"
    },
    "3896": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3898": {
      "op": "DUP7"
    },
    "3899": {
      "op": "ADD"
    },
    "3900": {
      "op": "MSTORE"
    },
    "3901": {
      "op": "PUSH2",
      "value": "0xF46"
    },
    "3904": {
      "op": "DUP3"
    },
    "3905": {
      "op": "DUP3"
    },
    "3906": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "3909": {
      "jump": "i",
      "op": "JUMP"
    },
    "3910": {
      "op": "JUMPDEST"
    },
    "3911": {
      "op": "SWAP6"
    },
    "3912": {
      "op": "SWAP5"
    },
    "3913": {
      "op": "POP"
    },
    "3914": {
      "op": "POP"
    },
    "3915": {
      "op": "POP"
    },
    "3916": {
      "op": "POP"
    },
    "3917": {
      "op": "POP"
    },
    "3918": {
      "jump": "o",
      "op": "JUMP"
    },
    "3919": {
      "op": "JUMPDEST"
    },
    "3920": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3922": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3924": {
      "op": "DUP1"
    },
    "3925": {
      "op": "DUP4"
    },
    "3926": {
      "op": "ADD"
    },
    "3927": {
      "op": "DUP2"
    },
    "3928": {
      "op": "DUP5"
    },
    "3929": {
      "op": "MSTORE"
    },
    "3930": {
      "op": "DUP1"
    },
    "3931": {
      "op": "DUP6"
    },
    "3932": {
      "op": "MLOAD"
    },
    "3933": {
      "op": "DUP1"
    },
    "3934": {
      "op": "DUP4"
    },
    "3935": {
      "op": "MSTORE"
    },
    "3936": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3938": {
      "op": "DUP7"
    },
    "3939": {
      "op": "ADD"
    },
    "3940": {
      "op": "SWAP2"
    },
    "3941": {
      "op": "POP"
    },
    "3942": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3944": {
      "op": "DUP2"
    },
    "3945": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3947": {
      "op": "SHL"
    },
    "3948": {
      "op": "DUP8"
    },
    "3949": {
      "op": "ADD"
    },
    "3950": {
      "op": "ADD"
    },
    "3951": {
      "op": "SWAP3"
    },
    "3952": {
      "op": "POP"
    },
    "3953": {
      "op": "DUP4"
    },
    "3954": {
      "op": "DUP8"
    },
    "3955": {
      "op": "ADD"
    },
    "3956": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3958": {
      "op": "JUMPDEST"
    },
    "3959": {
      "op": "DUP3"
    },
    "3960": {
      "op": "DUP2"
    },
    "3961": {
      "op": "LT"
    },
    "3962": {
      "op": "ISZERO"
    },
    "3963": {
      "op": "PUSH2",
      "value": "0xFA4"
    },
    "3966": {
      "op": "JUMPI"
    },
    "3967": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3969": {
      "op": "NOT"
    },
    "3970": {
      "op": "DUP9"
    },
    "3971": {
      "op": "DUP7"
    },
    "3972": {
      "op": "SUB"
    },
    "3973": {
      "op": "ADD"
    },
    "3974": {
      "op": "DUP5"
    },
    "3975": {
      "op": "MSTORE"
    },
    "3976": {
      "op": "PUSH2",
      "value": "0xF92"
    },
    "3979": {
      "op": "DUP6"
    },
    "3980": {
      "op": "DUP4"
    },
    "3981": {
      "op": "MLOAD"
    },
    "3982": {
      "op": "PUSH2",
      "value": "0xEFC"
    },
    "3985": {
      "jump": "i",
      "op": "JUMP"
    },
    "3986": {
      "op": "JUMPDEST"
    },
    "3987": {
      "op": "SWAP5"
    },
    "3988": {
      "op": "POP"
    },
    "3989": {
      "op": "SWAP3"
    },
    "3990": {
      "op": "DUP6"
    },
    "3991": {
      "op": "ADD"
    },
    "3992": {
      "op": "SWAP3"
    },
    "3993": {
      "op": "SWAP1"
    },
    "3994": {
      "op": "DUP6"
    },
    "3995": {
      "op": "ADD"
    },
    "3996": {
      "op": "SWAP1"
    },
    "3997": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3999": {
      "op": "ADD"
    },
    "4000": {
      "op": "PUSH2",
      "value": "0xF76"
    },
    "4003": {
      "op": "JUMP"
    },
    "4004": {
      "op": "JUMPDEST"
    },
    "4005": {
      "op": "POP"
    },
    "4006": {
      "op": "SWAP3"
    },
    "4007": {
      "op": "SWAP8"
    },
    "4008": {
      "op": "SWAP7"
    },
    "4009": {
      "op": "POP"
    },
    "4010": {
      "op": "POP"
    },
    "4011": {
      "op": "POP"
    },
    "4012": {
      "op": "POP"
    },
    "4013": {
      "op": "POP"
    },
    "4014": {
      "op": "POP"
    },
    "4015": {
      "op": "POP"
    },
    "4016": {
      "jump": "o",
      "op": "JUMP"
    },
    "4017": {
      "op": "JUMPDEST"
    },
    "4018": {
      "op": "DUP1"
    },
    "4019": {
      "op": "CALLDATALOAD"
    },
    "4020": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4022": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4024": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4026": {
      "op": "SHL"
    },
    "4027": {
      "op": "SUB"
    },
    "4028": {
      "op": "DUP2"
    },
    "4029": {
      "op": "AND"
    },
    "4030": {
      "op": "DUP2"
    },
    "4031": {
      "op": "EQ"
    },
    "4032": {
      "op": "PUSH2",
      "value": "0xFC8"
    },
    "4035": {
      "op": "JUMPI"
    },
    "4036": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4038": {
      "op": "DUP1"
    },
    "4039": {
      "op": "REVERT"
    },
    "4040": {
      "op": "JUMPDEST"
    },
    "4041": {
      "op": "SWAP2"
    },
    "4042": {
      "op": "SWAP1"
    },
    "4043": {
      "op": "POP"
    },
    "4044": {
      "jump": "o",
      "op": "JUMP"
    },
    "4045": {
      "op": "JUMPDEST"
    },
    "4046": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4048": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4050": {
      "op": "DUP3"
    },
    "4051": {
      "op": "DUP5"
    },
    "4052": {
      "op": "SUB"
    },
    "4053": {
      "op": "SLT"
    },
    "4054": {
      "op": "ISZERO"
    },
    "4055": {
      "op": "PUSH2",
      "value": "0xFDF"
    },
    "4058": {
      "op": "JUMPI"
    },
    "4059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4061": {
      "op": "DUP1"
    },
    "4062": {
      "op": "REVERT"
    },
    "4063": {
      "op": "JUMPDEST"
    },
    "4064": {
      "op": "PUSH2",
      "value": "0xFE8"
    },
    "4067": {
      "op": "DUP3"
    },
    "4068": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4071": {
      "jump": "i",
      "op": "JUMP"
    },
    "4072": {
      "op": "JUMPDEST"
    },
    "4073": {
      "op": "SWAP4"
    },
    "4074": {
      "op": "SWAP3"
    },
    "4075": {
      "op": "POP"
    },
    "4076": {
      "op": "POP"
    },
    "4077": {
      "op": "POP"
    },
    "4078": {
      "jump": "o",
      "op": "JUMP"
    },
    "4079": {
      "op": "JUMPDEST"
    },
    "4080": {
      "op": "DUP5"
    },
    "4081": {
      "op": "ISZERO"
    },
    "4082": {
      "op": "ISZERO"
    },
    "4083": {
      "op": "DUP2"
    },
    "4084": {
      "op": "MSTORE"
    },
    "4085": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4087": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4089": {
      "op": "DUP3"
    },
    "4090": {
      "op": "ADD"
    },
    "4091": {
      "op": "MSTORE"
    },
    "4092": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4094": {
      "op": "PUSH2",
      "value": "0x100A"
    },
    "4097": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4099": {
      "op": "DUP4"
    },
    "4100": {
      "op": "ADD"
    },
    "4101": {
      "op": "DUP7"
    },
    "4102": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "4105": {
      "jump": "i",
      "op": "JUMP"
    },
    "4106": {
      "op": "JUMPDEST"
    },
    "4107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4113": {
      "op": "SHL"
    },
    "4114": {
      "op": "SUB"
    },
    "4115": {
      "op": "SWAP5"
    },
    "4116": {
      "op": "SWAP1"
    },
    "4117": {
      "op": "SWAP5"
    },
    "4118": {
      "op": "AND"
    },
    "4119": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4121": {
      "op": "DUP4"
    },
    "4122": {
      "op": "ADD"
    },
    "4123": {
      "op": "MSTORE"
    },
    "4124": {
      "op": "POP"
    },
    "4125": {
      "op": "SWAP1"
    },
    "4126": {
      "op": "ISZERO"
    },
    "4127": {
      "op": "ISZERO"
    },
    "4128": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4130": {
      "op": "SWAP1"
    },
    "4131": {
      "op": "SWAP2"
    },
    "4132": {
      "op": "ADD"
    },
    "4133": {
      "op": "MSTORE"
    },
    "4134": {
      "op": "SWAP3"
    },
    "4135": {
      "op": "SWAP2"
    },
    "4136": {
      "op": "POP"
    },
    "4137": {
      "op": "POP"
    },
    "4138": {
      "jump": "o",
      "op": "JUMP"
    },
    "4139": {
      "op": "JUMPDEST"
    },
    "4140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4142": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4144": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4146": {
      "op": "SHL"
    },
    "4147": {
      "op": "SUB"
    },
    "4148": {
      "op": "DUP4"
    },
    "4149": {
      "op": "AND"
    },
    "4150": {
      "op": "DUP2"
    },
    "4151": {
      "op": "MSTORE"
    },
    "4152": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4154": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4156": {
      "op": "DUP3"
    },
    "4157": {
      "op": "ADD"
    },
    "4158": {
      "op": "DUP2"
    },
    "4159": {
      "op": "SWAP1"
    },
    "4160": {
      "op": "MSTORE"
    },
    "4161": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4163": {
      "op": "SWAP1"
    },
    "4164": {
      "op": "PUSH2",
      "value": "0x104F"
    },
    "4167": {
      "op": "SWAP1"
    },
    "4168": {
      "op": "DUP4"
    },
    "4169": {
      "op": "ADD"
    },
    "4170": {
      "op": "DUP5"
    },
    "4171": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "4174": {
      "jump": "i",
      "op": "JUMP"
    },
    "4175": {
      "op": "JUMPDEST"
    },
    "4176": {
      "op": "SWAP5"
    },
    "4177": {
      "op": "SWAP4"
    },
    "4178": {
      "op": "POP"
    },
    "4179": {
      "op": "POP"
    },
    "4180": {
      "op": "POP"
    },
    "4181": {
      "op": "POP"
    },
    "4182": {
      "jump": "o",
      "op": "JUMP"
    },
    "4183": {
      "op": "JUMPDEST"
    },
    "4184": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4189": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4191": {
      "op": "SHL"
    },
    "4192": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4194": {
      "op": "MSTORE"
    },
    "4195": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "4197": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4199": {
      "op": "MSTORE"
    },
    "4200": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4202": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4204": {
      "op": "REVERT"
    },
    "4205": {
      "op": "JUMPDEST"
    },
    "4206": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4208": {
      "op": "DUP3"
    },
    "4209": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4211": {
      "op": "DUP4"
    },
    "4212": {
      "op": "ADD"
    },
    "4213": {
      "op": "SLT"
    },
    "4214": {
      "op": "PUSH2",
      "value": "0x107E"
    },
    "4217": {
      "op": "JUMPI"
    },
    "4218": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4220": {
      "op": "DUP1"
    },
    "4221": {
      "op": "REVERT"
    },
    "4222": {
      "op": "JUMPDEST"
    },
    "4223": {
      "op": "DUP2"
    },
    "4224": {
      "op": "CALLDATALOAD"
    },
    "4225": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4234": {
      "op": "DUP1"
    },
    "4235": {
      "op": "DUP3"
    },
    "4236": {
      "op": "GT"
    },
    "4237": {
      "op": "ISZERO"
    },
    "4238": {
      "op": "PUSH2",
      "value": "0x1099"
    },
    "4241": {
      "op": "JUMPI"
    },
    "4242": {
      "op": "PUSH2",
      "value": "0x1099"
    },
    "4245": {
      "op": "PUSH2",
      "value": "0x1057"
    },
    "4248": {
      "jump": "i",
      "op": "JUMP"
    },
    "4249": {
      "op": "JUMPDEST"
    },
    "4250": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4252": {
      "op": "MLOAD"
    },
    "4253": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4255": {
      "op": "DUP4"
    },
    "4256": {
      "op": "ADD"
    },
    "4257": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4259": {
      "op": "NOT"
    },
    "4260": {
      "op": "SWAP1"
    },
    "4261": {
      "op": "DUP2"
    },
    "4262": {
      "op": "AND"
    },
    "4263": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "4265": {
      "op": "ADD"
    },
    "4266": {
      "op": "AND"
    },
    "4267": {
      "op": "DUP2"
    },
    "4268": {
      "op": "ADD"
    },
    "4269": {
      "op": "SWAP1"
    },
    "4270": {
      "op": "DUP3"
    },
    "4271": {
      "op": "DUP3"
    },
    "4272": {
      "op": "GT"
    },
    "4273": {
      "op": "DUP2"
    },
    "4274": {
      "op": "DUP4"
    },
    "4275": {
      "op": "LT"
    },
    "4276": {
      "op": "OR"
    },
    "4277": {
      "op": "ISZERO"
    },
    "4278": {
      "op": "PUSH2",
      "value": "0x10C1"
    },
    "4281": {
      "op": "JUMPI"
    },
    "4282": {
      "op": "PUSH2",
      "value": "0x10C1"
    },
    "4285": {
      "op": "PUSH2",
      "value": "0x1057"
    },
    "4288": {
      "jump": "i",
      "op": "JUMP"
    },
    "4289": {
      "op": "JUMPDEST"
    },
    "4290": {
      "op": "DUP2"
    },
    "4291": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4293": {
      "op": "MSTORE"
    },
    "4294": {
      "op": "DUP4"
    },
    "4295": {
      "op": "DUP2"
    },
    "4296": {
      "op": "MSTORE"
    },
    "4297": {
      "op": "DUP7"
    },
    "4298": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4300": {
      "op": "DUP6"
    },
    "4301": {
      "op": "DUP9"
    },
    "4302": {
      "op": "ADD"
    },
    "4303": {
      "op": "ADD"
    },
    "4304": {
      "op": "GT"
    },
    "4305": {
      "op": "ISZERO"
    },
    "4306": {
      "op": "PUSH2",
      "value": "0x10DA"
    },
    "4309": {
      "op": "JUMPI"
    },
    "4310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4312": {
      "op": "DUP1"
    },
    "4313": {
      "op": "REVERT"
    },
    "4314": {
      "op": "JUMPDEST"
    },
    "4315": {
      "op": "DUP4"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4318": {
      "op": "DUP8"
    },
    "4319": {
      "op": "ADD"
    },
    "4320": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4322": {
      "op": "DUP4"
    },
    "4323": {
      "op": "ADD"
    },
    "4324": {
      "op": "CALLDATACOPY"
    },
    "4325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4327": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4329": {
      "op": "DUP6"
    },
    "4330": {
      "op": "DUP4"
    },
    "4331": {
      "op": "ADD"
    },
    "4332": {
      "op": "ADD"
    },
    "4333": {
      "op": "MSTORE"
    },
    "4334": {
      "op": "DUP1"
    },
    "4335": {
      "op": "SWAP5"
    },
    "4336": {
      "op": "POP"
    },
    "4337": {
      "op": "POP"
    },
    "4338": {
      "op": "POP"
    },
    "4339": {
      "op": "POP"
    },
    "4340": {
      "op": "POP"
    },
    "4341": {
      "op": "SWAP3"
    },
    "4342": {
      "op": "SWAP2"
    },
    "4343": {
      "op": "POP"
    },
    "4344": {
      "op": "POP"
    },
    "4345": {
      "jump": "o",
      "op": "JUMP"
    },
    "4346": {
      "op": "JUMPDEST"
    },
    "4347": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4349": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4351": {
      "op": "DUP3"
    },
    "4352": {
      "op": "DUP5"
    },
    "4353": {
      "op": "SUB"
    },
    "4354": {
      "op": "SLT"
    },
    "4355": {
      "op": "ISZERO"
    },
    "4356": {
      "op": "PUSH2",
      "value": "0x110C"
    },
    "4359": {
      "op": "JUMPI"
    },
    "4360": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4362": {
      "op": "DUP1"
    },
    "4363": {
      "op": "REVERT"
    },
    "4364": {
      "op": "JUMPDEST"
    },
    "4365": {
      "op": "DUP2"
    },
    "4366": {
      "op": "CALLDATALOAD"
    },
    "4367": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4376": {
      "op": "DUP2"
    },
    "4377": {
      "op": "GT"
    },
    "4378": {
      "op": "ISZERO"
    },
    "4379": {
      "op": "PUSH2",
      "value": "0x1123"
    },
    "4382": {
      "op": "JUMPI"
    },
    "4383": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4385": {
      "op": "DUP1"
    },
    "4386": {
      "op": "REVERT"
    },
    "4387": {
      "op": "JUMPDEST"
    },
    "4388": {
      "op": "PUSH2",
      "value": "0x104F"
    },
    "4391": {
      "op": "DUP5"
    },
    "4392": {
      "op": "DUP3"
    },
    "4393": {
      "op": "DUP6"
    },
    "4394": {
      "op": "ADD"
    },
    "4395": {
      "op": "PUSH2",
      "value": "0x106D"
    },
    "4398": {
      "jump": "i",
      "op": "JUMP"
    },
    "4399": {
      "op": "JUMPDEST"
    },
    "4400": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4402": {
      "op": "DUP2"
    },
    "4403": {
      "op": "MSTORE"
    },
    "4404": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4406": {
      "op": "PUSH2",
      "value": "0x1142"
    },
    "4409": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4411": {
      "op": "DUP4"
    },
    "4412": {
      "op": "ADD"
    },
    "4413": {
      "op": "DUP8"
    },
    "4414": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "4417": {
      "jump": "i",
      "op": "JUMP"
    },
    "4418": {
      "op": "JUMPDEST"
    },
    "4419": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4421": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4423": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4425": {
      "op": "SHL"
    },
    "4426": {
      "op": "SUB"
    },
    "4427": {
      "op": "DUP7"
    },
    "4428": {
      "op": "AND"
    },
    "4429": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4431": {
      "op": "DUP5"
    },
    "4432": {
      "op": "ADD"
    },
    "4433": {
      "op": "MSTORE"
    },
    "4434": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4436": {
      "op": "DUP4"
    },
    "4437": {
      "op": "ADD"
    },
    "4438": {
      "op": "DUP6"
    },
    "4439": {
      "op": "SWAP1"
    },
    "4440": {
      "op": "MSTORE"
    },
    "4441": {
      "op": "DUP3"
    },
    "4442": {
      "op": "DUP2"
    },
    "4443": {
      "op": "SUB"
    },
    "4444": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4446": {
      "op": "DUP5"
    },
    "4447": {
      "op": "ADD"
    },
    "4448": {
      "op": "MSTORE"
    },
    "4449": {
      "op": "PUSH2",
      "value": "0x116A"
    },
    "4452": {
      "op": "DUP2"
    },
    "4453": {
      "op": "DUP6"
    },
    "4454": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "4457": {
      "jump": "i",
      "op": "JUMP"
    },
    "4458": {
      "op": "JUMPDEST"
    },
    "4459": {
      "op": "SWAP8"
    },
    "4460": {
      "op": "SWAP7"
    },
    "4461": {
      "op": "POP"
    },
    "4462": {
      "op": "POP"
    },
    "4463": {
      "op": "POP"
    },
    "4464": {
      "op": "POP"
    },
    "4465": {
      "op": "POP"
    },
    "4466": {
      "op": "POP"
    },
    "4467": {
      "op": "POP"
    },
    "4468": {
      "jump": "o",
      "op": "JUMP"
    },
    "4469": {
      "op": "JUMPDEST"
    },
    "4470": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4472": {
      "op": "DUP1"
    },
    "4473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4475": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4477": {
      "op": "DUP5"
    },
    "4478": {
      "op": "DUP7"
    },
    "4479": {
      "op": "SUB"
    },
    "4480": {
      "op": "SLT"
    },
    "4481": {
      "op": "ISZERO"
    },
    "4482": {
      "op": "PUSH2",
      "value": "0x118A"
    },
    "4485": {
      "op": "JUMPI"
    },
    "4486": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4488": {
      "op": "DUP1"
    },
    "4489": {
      "op": "REVERT"
    },
    "4490": {
      "op": "JUMPDEST"
    },
    "4491": {
      "op": "PUSH2",
      "value": "0x1193"
    },
    "4494": {
      "op": "DUP5"
    },
    "4495": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4498": {
      "jump": "i",
      "op": "JUMP"
    },
    "4499": {
      "op": "JUMPDEST"
    },
    "4500": {
      "op": "SWAP3"
    },
    "4501": {
      "op": "POP"
    },
    "4502": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4504": {
      "op": "DUP5"
    },
    "4505": {
      "op": "ADD"
    },
    "4506": {
      "op": "CALLDATALOAD"
    },
    "4507": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4516": {
      "op": "DUP1"
    },
    "4517": {
      "op": "DUP3"
    },
    "4518": {
      "op": "GT"
    },
    "4519": {
      "op": "ISZERO"
    },
    "4520": {
      "op": "PUSH2",
      "value": "0x11B0"
    },
    "4523": {
      "op": "JUMPI"
    },
    "4524": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4526": {
      "op": "DUP1"
    },
    "4527": {
      "op": "REVERT"
    },
    "4528": {
      "op": "JUMPDEST"
    },
    "4529": {
      "op": "PUSH2",
      "value": "0x11BC"
    },
    "4532": {
      "op": "DUP8"
    },
    "4533": {
      "op": "DUP4"
    },
    "4534": {
      "op": "DUP9"
    },
    "4535": {
      "op": "ADD"
    },
    "4536": {
      "op": "PUSH2",
      "value": "0x106D"
    },
    "4539": {
      "jump": "i",
      "op": "JUMP"
    },
    "4540": {
      "op": "JUMPDEST"
    },
    "4541": {
      "op": "SWAP4"
    },
    "4542": {
      "op": "POP"
    },
    "4543": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4545": {
      "op": "DUP7"
    },
    "4546": {
      "op": "ADD"
    },
    "4547": {
      "op": "CALLDATALOAD"
    },
    "4548": {
      "op": "SWAP2"
    },
    "4549": {
      "op": "POP"
    },
    "4550": {
      "op": "DUP1"
    },
    "4551": {
      "op": "DUP3"
    },
    "4552": {
      "op": "GT"
    },
    "4553": {
      "op": "ISZERO"
    },
    "4554": {
      "op": "PUSH2",
      "value": "0x11D2"
    },
    "4557": {
      "op": "JUMPI"
    },
    "4558": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4560": {
      "op": "DUP1"
    },
    "4561": {
      "op": "REVERT"
    },
    "4562": {
      "op": "JUMPDEST"
    },
    "4563": {
      "op": "POP"
    },
    "4564": {
      "op": "PUSH2",
      "value": "0x11DF"
    },
    "4567": {
      "op": "DUP7"
    },
    "4568": {
      "op": "DUP3"
    },
    "4569": {
      "op": "DUP8"
    },
    "4570": {
      "op": "ADD"
    },
    "4571": {
      "op": "PUSH2",
      "value": "0x106D"
    },
    "4574": {
      "jump": "i",
      "op": "JUMP"
    },
    "4575": {
      "op": "JUMPDEST"
    },
    "4576": {
      "op": "SWAP2"
    },
    "4577": {
      "op": "POP"
    },
    "4578": {
      "op": "POP"
    },
    "4579": {
      "op": "SWAP3"
    },
    "4580": {
      "op": "POP"
    },
    "4581": {
      "op": "SWAP3"
    },
    "4582": {
      "op": "POP"
    },
    "4583": {
      "op": "SWAP3"
    },
    "4584": {
      "jump": "o",
      "op": "JUMP"
    },
    "4585": {
      "op": "JUMPDEST"
    },
    "4586": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4588": {
      "op": "DUP2"
    },
    "4589": {
      "op": "MSTORE"
    },
    "4590": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4592": {
      "op": "PUSH2",
      "value": "0xFE8"
    },
    "4595": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4597": {
      "op": "DUP4"
    },
    "4598": {
      "op": "ADD"
    },
    "4599": {
      "op": "DUP5"
    },
    "4600": {
      "op": "PUSH2",
      "value": "0xED0"
    },
    "4603": {
      "jump": "i",
      "op": "JUMP"
    },
    "4604": {
      "op": "JUMPDEST"
    },
    "4605": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4610": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4612": {
      "op": "SHL"
    },
    "4613": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4615": {
      "op": "MSTORE"
    },
    "4616": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "4618": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4620": {
      "op": "MSTORE"
    },
    "4621": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4625": {
      "op": "REVERT"
    },
    "4626": {
      "op": "JUMPDEST"
    },
    "4627": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4629": {
      "op": "DUP2"
    },
    "4630": {
      "op": "ADD"
    },
    "4631": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "4633": {
      "op": "DUP4"
    },
    "4634": {
      "op": "LT"
    },
    "4635": {
      "op": "PUSH2",
      "value": "0x1234"
    },
    "4638": {
      "op": "JUMPI"
    },
    "4639": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4644": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4646": {
      "op": "SHL"
    },
    "4647": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4649": {
      "op": "MSTORE"
    },
    "4650": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "4652": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4654": {
      "op": "MSTORE"
    },
    "4655": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4657": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4659": {
      "op": "REVERT"
    },
    "4660": {
      "op": "JUMPDEST"
    },
    "4661": {
      "op": "SWAP2"
    },
    "4662": {
      "op": "SWAP1"
    },
    "4663": {
      "op": "MSTORE"
    },
    "4664": {
      "op": "SWAP1"
    },
    "4665": {
      "jump": "o",
      "op": "JUMP"
    },
    "4666": {
      "op": "JUMPDEST"
    },
    "4667": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4669": {
      "op": "DUP1"
    },
    "4670": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4672": {
      "op": "DUP4"
    },
    "4673": {
      "op": "DUP6"
    },
    "4674": {
      "op": "SUB"
    },
    "4675": {
      "op": "SLT"
    },
    "4676": {
      "op": "ISZERO"
    },
    "4677": {
      "op": "PUSH2",
      "value": "0x124D"
    },
    "4680": {
      "op": "JUMPI"
    },
    "4681": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4683": {
      "op": "DUP1"
    },
    "4684": {
      "op": "REVERT"
    },
    "4685": {
      "op": "JUMPDEST"
    },
    "4686": {
      "op": "PUSH2",
      "value": "0x1256"
    },
    "4689": {
      "op": "DUP4"
    },
    "4690": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4693": {
      "jump": "i",
      "op": "JUMP"
    },
    "4694": {
      "op": "JUMPDEST"
    },
    "4695": {
      "op": "SWAP2"
    },
    "4696": {
      "op": "POP"
    },
    "4697": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4699": {
      "op": "DUP4"
    },
    "4700": {
      "op": "ADD"
    },
    "4701": {
      "op": "CALLDATALOAD"
    },
    "4702": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4711": {
      "op": "DUP2"
    },
    "4712": {
      "op": "GT"
    },
    "4713": {
      "op": "ISZERO"
    },
    "4714": {
      "op": "PUSH2",
      "value": "0x1272"
    },
    "4717": {
      "op": "JUMPI"
    },
    "4718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4720": {
      "op": "DUP1"
    },
    "4721": {
      "op": "REVERT"
    },
    "4722": {
      "op": "JUMPDEST"
    },
    "4723": {
      "op": "PUSH2",
      "value": "0x127E"
    },
    "4726": {
      "op": "DUP6"
    },
    "4727": {
      "op": "DUP3"
    },
    "4728": {
      "op": "DUP7"
    },
    "4729": {
      "op": "ADD"
    },
    "4730": {
      "op": "PUSH2",
      "value": "0x106D"
    },
    "4733": {
      "jump": "i",
      "op": "JUMP"
    },
    "4734": {
      "op": "JUMPDEST"
    },
    "4735": {
      "op": "SWAP2"
    },
    "4736": {
      "op": "POP"
    },
    "4737": {
      "op": "POP"
    },
    "4738": {
      "op": "SWAP3"
    },
    "4739": {
      "op": "POP"
    },
    "4740": {
      "op": "SWAP3"
    },
    "4741": {
      "op": "SWAP1"
    },
    "4742": {
      "op": "POP"
    },
    "4743": {
      "jump": "o",
      "op": "JUMP"
    },
    "4744": {
      "op": "JUMPDEST"
    },
    "4745": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4747": {
      "op": "DUP2"
    },
    "4748": {
      "op": "MSTORE"
    },
    "4749": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4751": {
      "op": "PUSH2",
      "value": "0xFE8"
    },
    "4754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4756": {
      "op": "DUP4"
    },
    "4757": {
      "op": "ADD"
    },
    "4758": {
      "op": "DUP5"
    },
    "4759": {
      "op": "PUSH2",
      "value": "0xEFC"
    },
    "4762": {
      "jump": "i",
      "op": "JUMP"
    },
    "4763": {
      "op": "JUMPDEST"
    },
    "4764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4766": {
      "op": "DUP2"
    },
    "4767": {
      "op": "DUP2"
    },
    "4768": {
      "op": "SHR"
    },
    "4769": {
      "op": "SWAP1"
    },
    "4770": {
      "op": "DUP3"
    },
    "4771": {
      "op": "AND"
    },
    "4772": {
      "op": "DUP1"
    },
    "4773": {
      "op": "PUSH2",
      "value": "0x12AF"
    },
    "4776": {
      "op": "JUMPI"
    },
    "4777": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "4779": {
      "op": "DUP3"
    },
    "4780": {
      "op": "AND"
    },
    "4781": {
      "op": "SWAP2"
    },
    "4782": {
      "op": "POP"
    },
    "4783": {
      "op": "JUMPDEST"
    },
    "4784": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4786": {
      "op": "DUP3"
    },
    "4787": {
      "op": "LT"
    },
    "4788": {
      "op": "DUP2"
    },
    "4789": {
      "op": "SUB"
    },
    "4790": {
      "op": "PUSH2",
      "value": "0x4F2"
    },
    "4793": {
      "op": "JUMPI"
    },
    "4794": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4799": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4801": {
      "op": "SHL"
    },
    "4802": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4804": {
      "op": "MSTORE"
    },
    "4805": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "4807": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4809": {
      "op": "MSTORE"
    },
    "4810": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4812": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4814": {
      "op": "REVERT"
    },
    "4815": {
      "op": "JUMPDEST"
    },
    "4816": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4818": {
      "op": "DUP1"
    },
    "4819": {
      "op": "DUP4"
    },
    "4820": {
      "op": "SLOAD"
    },
    "4821": {
      "op": "DUP2"
    },
    "4822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4824": {
      "op": "DUP3"
    },
    "4825": {
      "op": "DUP2"
    },
    "4826": {
      "op": "SHR"
    },
    "4827": {
      "op": "SWAP2"
    },
    "4828": {
      "op": "POP"
    },
    "4829": {
      "op": "DUP1"
    },
    "4830": {
      "op": "DUP4"
    },
    "4831": {
      "op": "AND"
    },
    "4832": {
      "op": "DUP1"
    },
    "4833": {
      "op": "PUSH2",
      "value": "0x12EB"
    },
    "4836": {
      "op": "JUMPI"
    },
    "4837": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "4839": {
      "op": "DUP4"
    },
    "4840": {
      "op": "AND"
    },
    "4841": {
      "op": "SWAP3"
    },
    "4842": {
      "op": "POP"
    },
    "4843": {
      "op": "JUMPDEST"
    },
    "4844": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4846": {
      "op": "DUP1"
    },
    "4847": {
      "op": "DUP5"
    },
    "4848": {
      "op": "LT"
    },
    "4849": {
      "op": "DUP3"
    },
    "4850": {
      "op": "SUB"
    },
    "4851": {
      "op": "PUSH2",
      "value": "0x130A"
    },
    "4854": {
      "op": "JUMPI"
    },
    "4855": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4860": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4862": {
      "op": "SHL"
    },
    "4863": {
      "op": "DUP7"
    },
    "4864": {
      "op": "MSTORE"
    },
    "4865": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "4867": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4869": {
      "op": "MSTORE"
    },
    "4870": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4872": {
      "op": "DUP7"
    },
    "4873": {
      "op": "REVERT"
    },
    "4874": {
      "op": "JUMPDEST"
    },
    "4875": {
      "op": "DUP2"
    },
    "4876": {
      "op": "DUP1"
    },
    "4877": {
      "op": "ISZERO"
    },
    "4878": {
      "op": "PUSH2",
      "value": "0x131E"
    },
    "4881": {
      "op": "JUMPI"
    },
    "4882": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4884": {
      "op": "DUP2"
    },
    "4885": {
      "op": "EQ"
    },
    "4886": {
      "op": "PUSH2",
      "value": "0x132F"
    },
    "4889": {
      "op": "JUMPI"
    },
    "4890": {
      "op": "PUSH2",
      "value": "0x135C"
    },
    "4893": {
      "op": "JUMP"
    },
    "4894": {
      "op": "JUMPDEST"
    },
    "4895": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4897": {
      "op": "NOT"
    },
    "4898": {
      "op": "DUP7"
    },
    "4899": {
      "op": "AND"
    },
    "4900": {
      "op": "DUP10"
    },
    "4901": {
      "op": "MSTORE"
    },
    "4902": {
      "op": "DUP5"
    },
    "4903": {
      "op": "DUP10"
    },
    "4904": {
      "op": "ADD"
    },
    "4905": {
      "op": "SWAP7"
    },
    "4906": {
      "op": "POP"
    },
    "4907": {
      "op": "PUSH2",
      "value": "0x135C"
    },
    "4910": {
      "op": "JUMP"
    },
    "4911": {
      "op": "JUMPDEST"
    },
    "4912": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4914": {
      "op": "DUP11"
    },
    "4915": {
      "op": "DUP2"
    },
    "4916": {
      "op": "MSTORE"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4919": {
      "op": "SWAP1"
    },
    "4920": {
      "op": "KECCAK256"
    },
    "4921": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4923": {
      "op": "JUMPDEST"
    },
    "4924": {
      "op": "DUP7"
    },
    "4925": {
      "op": "DUP2"
    },
    "4926": {
      "op": "LT"
    },
    "4927": {
      "op": "ISZERO"
    },
    "4928": {
      "op": "PUSH2",
      "value": "0x1354"
    },
    "4931": {
      "op": "JUMPI"
    },
    "4932": {
      "op": "DUP2"
    },
    "4933": {
      "op": "SLOAD"
    },
    "4934": {
      "op": "DUP12"
    },
    "4935": {
      "op": "DUP3"
    },
    "4936": {
      "op": "ADD"
    },
    "4937": {
      "op": "MSTORE"
    },
    "4938": {
      "op": "SWAP1"
    },
    "4939": {
      "op": "DUP6"
    },
    "4940": {
      "op": "ADD"
    },
    "4941": {
      "op": "SWAP1"
    },
    "4942": {
      "op": "DUP4"
    },
    "4943": {
      "op": "ADD"
    },
    "4944": {
      "op": "PUSH2",
      "value": "0x133B"
    },
    "4947": {
      "op": "JUMP"
    },
    "4948": {
      "op": "JUMPDEST"
    },
    "4949": {
      "op": "POP"
    },
    "4950": {
      "op": "POP"
    },
    "4951": {
      "op": "DUP5"
    },
    "4952": {
      "op": "DUP10"
    },
    "4953": {
      "op": "ADD"
    },
    "4954": {
      "op": "SWAP7"
    },
    "4955": {
      "op": "POP"
    },
    "4956": {
      "op": "JUMPDEST"
    },
    "4957": {
      "op": "POP"
    },
    "4958": {
      "op": "SWAP5"
    },
    "4959": {
      "op": "SWAP9"
    },
    "4960": {
      "op": "SWAP8"
    },
    "4961": {
      "op": "POP"
    },
    "4962": {
      "op": "POP"
    },
    "4963": {
      "op": "POP"
    },
    "4964": {
      "op": "POP"
    },
    "4965": {
      "op": "POP"
    },
    "4966": {
      "op": "POP"
    },
    "4967": {
      "op": "POP"
    },
    "4968": {
      "op": "POP"
    },
    "4969": {
      "jump": "o",
      "op": "JUMP"
    },
    "4970": {
      "op": "JUMPDEST"
    },
    "4971": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4976": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4978": {
      "op": "SHL"
    },
    "4979": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4981": {
      "op": "MSTORE"
    },
    "4982": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4984": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4986": {
      "op": "MSTORE"
    },
    "4987": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4989": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4991": {
      "op": "REVERT"
    },
    "4992": {
      "op": "JUMPDEST"
    },
    "4993": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4998": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5000": {
      "op": "SHL"
    },
    "5001": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5003": {
      "op": "MSTORE"
    },
    "5004": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5006": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5008": {
      "op": "MSTORE"
    },
    "5009": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5011": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5013": {
      "op": "REVERT"
    },
    "5014": {
      "op": "JUMPDEST"
    },
    "5015": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5019": {
      "op": "DUP3"
    },
    "5020": {
      "op": "ADD"
    },
    "5021": {
      "op": "PUSH2",
      "value": "0x13A8"
    },
    "5024": {
      "op": "JUMPI"
    },
    "5025": {
      "op": "PUSH2",
      "value": "0x13A8"
    },
    "5028": {
      "op": "PUSH2",
      "value": "0x1380"
    },
    "5031": {
      "jump": "i",
      "op": "JUMP"
    },
    "5032": {
      "op": "JUMPDEST"
    },
    "5033": {
      "op": "POP"
    },
    "5034": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5036": {
      "op": "ADD"
    },
    "5037": {
      "op": "SWAP1"
    },
    "5038": {
      "jump": "o",
      "op": "JUMP"
    },
    "5039": {
      "op": "JUMPDEST"
    },
    "5040": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5042": {
      "op": "DUP3"
    },
    "5043": {
      "op": "MLOAD"
    },
    "5044": {
      "op": "PUSH2",
      "value": "0x13C1"
    },
    "5047": {
      "op": "DUP2"
    },
    "5048": {
      "op": "DUP5"
    },
    "5049": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5051": {
      "op": "DUP8"
    },
    "5052": {
      "op": "ADD"
    },
    "5053": {
      "op": "PUSH2",
      "value": "0xEA0"
    },
    "5056": {
      "jump": "i",
      "op": "JUMP"
    },
    "5057": {
      "op": "JUMPDEST"
    },
    "5058": {
      "op": "SWAP2"
    },
    "5059": {
      "op": "SWAP1"
    },
    "5060": {
      "op": "SWAP2"
    },
    "5061": {
      "op": "ADD"
    },
    "5062": {
      "op": "SWAP3"
    },
    "5063": {
      "op": "SWAP2"
    },
    "5064": {
      "op": "POP"
    },
    "5065": {
      "op": "POP"
    },
    "5066": {
      "jump": "o",
      "op": "JUMP"
    },
    "5067": {
      "op": "JUMPDEST"
    },
    "5068": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5070": {
      "op": "DUP3"
    },
    "5071": {
      "op": "NOT"
    },
    "5072": {
      "op": "DUP3"
    },
    "5073": {
      "op": "GT"
    },
    "5074": {
      "op": "ISZERO"
    },
    "5075": {
      "op": "PUSH2",
      "value": "0x13DE"
    },
    "5078": {
      "op": "JUMPI"
    },
    "5079": {
      "op": "PUSH2",
      "value": "0x13DE"
    },
    "5082": {
      "op": "PUSH2",
      "value": "0x1380"
    },
    "5085": {
      "jump": "i",
      "op": "JUMP"
    },
    "5086": {
      "op": "JUMPDEST"
    },
    "5087": {
      "op": "POP"
    },
    "5088": {
      "op": "ADD"
    },
    "5089": {
      "op": "SWAP1"
    },
    "5090": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "6e8398d93822e627ecc5c5537371d1aba7ddc944",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\ncontract Voting {\n\n    struct Voter{\n        bool isAVoter;\n        string voterName;\n        address voterAddress;\n        bool voted;\n    }\n\n\n   struct Vote{\n        address voterAddress;\n        string symbol;\n    }\n\n    struct Candidate{\n        string candidateName;\n        address candidateAddress;\n        uint256 numberOfVotes;\n        string symbol;\n    }\n\n    mapping (address => Voter) public AddressToVoter;\n    mapping (address => Vote) public AddressToVote;\n\n\n    mapping (uint256 => Vote) Votes;\n\n\n    mapping (uint256 => address) public VoterList;\n    mapping (uint256 => string) public CandidateList;\n    mapping (string => Candidate) public SymbolToCandidate;\n\n    mapping (string => uint256) public symbolToVotes;\n\n\n    uint256 public candidatesCount;\n\n\n    uint256 public totalVoters;\n    uint256 public totalVotes;\n\n    enum State { Created, Voting, Ended }\n    State public state;\n\n    address public OragnizerAddress;      \n    string public  ElectionName;\n\n\n    constructor(string memory _electionName){\n        OragnizerAddress = msg.sender;\n        ElectionName = _electionName;\n\n        state = State.Created;\n\n\n    }\n\n    function addCandidates(address _candidateAddress, string memory _candidateName, string memory _symbol) public InState(State.Created) OfficialOnly{\n        Candidate memory candidate;\n        candidate.candidateAddress = _candidateAddress;\n        candidate.candidateName = _candidateName;\n        candidate.symbol = _symbol;\n        CandidateList[candidatesCount] = _symbol;\n\n        SymbolToCandidate[_symbol] = candidate;\n        candidatesCount = candidatesCount + 1;\n\n    }\n\n\n    function getCandidates() public view returns (Candidate[] memory){\n      Candidate[] memory trrips = new Candidate[](candidatesCount);\n      for (uint i = 0; i < candidatesCount; i++) {\n          Candidate storage candidate = SymbolToCandidate[CandidateList[i]];\n          trrips[i] = candidate;\n      }\n      return trrips;\n\n    }\n\n\n    function getCandidate(string memory _symbol) public view returns(Candidate memory){\n        return SymbolToCandidate[_symbol];\n    }\n\n    function addVoter(address _voterAddress, string memory _voterName) public InState(State.Created) OfficialOnly {\n        Voter memory voter;\n        voter.isAVoter = true;\n        voter.voterAddress = _voterAddress;\n        voter.voterName = _voterName;\n        voter.voted = false;\n\n        AddressToVoter[_voterAddress] = voter;\n        VoterList[totalVoters] = _voterAddress;\n        totalVoters = totalVoters + 1;\n    \n    }\n\n\n    function makeVote(string memory _voteSymbol) public {\n        require(AddressToVoter[msg.sender].isAVoter,\"Not registered\");\n        if(AddressToVoter[msg.sender].voted == false){\n        Vote memory vote;\n        vote.voterAddress = msg.sender;\n        vote.symbol = _voteSymbol;\n\n        AddressToVote[msg.sender] = vote;\n\n        SymbolToCandidate[_voteSymbol].numberOfVotes = SymbolToCandidate[_voteSymbol].numberOfVotes + 1;\n        symbolToVotes[_voteSymbol] = symbolToVotes[_voteSymbol] + 1;\n\n\n\n\n\n        AddressToVoter[msg.sender].voted = true;\n        }\n    }\n\n\n\n\n    modifier InState(State _state){\n        require(state == _state);\n        _;\n    }\n\n    modifier OfficialOnly (){\n        require( OragnizerAddress == msg.sender);\n        _;\n    }\n\n\n\n}\n\n\n\n",
  "sourceMap": "58:3307:0:-:0;;;1045:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1095:16;:29;;-1:-1:-1;;;;;;1095:29:0;1114:10;1095:29;;;;;1134:28;;;;:12;;:28;;;;;:::i;:::-;-1:-1:-1;;1173:5:0;:21;;-1:-1:-1;;1173:21:0;;;58:3307;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;58:3307:0;;;-1:-1:-1;58:3307:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1087;226:6;257:2;300;288:9;279:7;275:23;271:32;268:52;;;316:1;313;306:12;268:52;343:16;;-1:-1:-1;;;;;408:14:1;;;405:34;;;435:1;432;425:12;405:34;473:6;462:9;458:22;448:32;;518:7;511:4;507:2;503:13;499:27;489:55;;540:1;537;530:12;489:55;569:2;563:9;591:2;587;584:10;581:36;;;597:18;;:::i;:::-;672:2;666:9;640:2;726:13;;-1:-1:-1;;722:22:1;;;746:2;718:31;714:40;702:53;;;770:18;;;790:22;;;767:46;764:72;;;816:18;;:::i;:::-;856:10;852:2;845:22;891:2;883:6;876:18;931:7;926:2;921;917;913:11;909:20;906:33;903:53;;;952:1;949;942:12;903:53;974:1;965:10;;984:129;998:2;995:1;992:9;984:129;;;1086:10;;;1082:19;;1076:26;1055:14;;;1051:23;;1044:59;1009:10;;;;984:129;;;1131:2;1128:1;1125:9;1122:80;;;1190:1;1185:2;1180;1172:6;1168:15;1164:24;1157:35;1122:80;1221:6;146:1087;-1:-1:-1;;;;;;;;146:1087:1:o;1370:380::-;1449:1;1445:12;;;;1492;;;1513:61;;1567:4;1559:6;1555:17;1545:27;;1513:61;1620:2;1612:6;1609:14;1589:18;1586:38;1583:161;;1666:10;1661:3;1657:20;1654:1;1647:31;1701:4;1698:1;1691:15;1729:4;1726:1;1719:15;1583:161;;1370:380;;;:::o;:::-;58:3307:0;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}